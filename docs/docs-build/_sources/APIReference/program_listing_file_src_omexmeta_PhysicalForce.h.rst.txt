
.. _program_listing_file_src_omexmeta_EnergyDiff.h:

Program Listing for File EnergyDiff.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_omexmeta_EnergyDiff.h>` (``src/omexmeta/EnergyDiff.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //
   // Created by Ciaran on 4/22/2020.
   //
   
   #ifndef LIBOMEXMETA_PHYSICALFORCE_H
   #define LIBOMEXMETA_PHYSICALFORCE_H
   
   
   #include "PhysicalPhenomenon.h"
   #include "Participant.h"
   #include "librdf.h"
   
   
   #include "PhysicalPhenomenon.h"
   #include "Participant.h"
   #include "redland/RedlandAPI.h"
   #include <vector>
   #include "Participant.h"
   #include "PhysicalProperty.h"
   #include "PhysicalPhenomenon.h"
   #include "OmexMetaUtils.h"
   
   using namespace redland;
   
   namespace omexmeta {
       class EnergyDiff : public PhysicalPhenomenon {
   
           Sources sources_;
           Sinks sinks_;
   
       public:
   
           /*
            * @brief default constructor for EnergyDiff
            * @details deliberately deleted. If you try using the
            * builder interface (chaining setter methods) from a default
            * instantiated EnergyDiff you will get an error, because there
            * will be no model assicated with EnergyDiff. Instead, always
            * instantiate a EnergyDiff from the Editor::addEnergyDiff() method.
            */
           EnergyDiff() = delete;
   
           ~EnergyDiff() = default;
   
   
           EnergyDiff(librdf_model *model, std::string local_uri, PhysicalProperty physicalProperty, Sources sources,
                         Sinks sinks);
   
           /*
            * @brief Free nodes associated with EnergyDiff.
            *
            * The EnergyDiff is
            * owned by the caller if the EnergyDiff::toTriples method is NOT used.
            * When toTriples() is used, the nodes that create the EnergyDiff are "given"
            * to the Triples object, which automatically destroys them at the right time.
            *
            * Most of the time, users will not have to remember to free the EnergyDiff themselves
            * as the toTriples method is always used.
            *
            */
           void free();
   
           /*
            * @brief constructor for instantiating a EnergyDiff type composite annotation
            * @param model. A librdf_model pass down by Editor.
            *
            * Users do not need to instantiate EnergyDiff manually, since it is done
            * by Editor. This constructor instantiates an empty EnergyDiff
            * object which is filled by
            *
            */
           explicit EnergyDiff(librdf_model *model);
   
           /*
            * @brief constructor for instantiating a EnergyDiff type composite annotation
            * @param model. A librdf_model pass down by Editor.
            * @param local_uri. String passed down by Editor. The local uri to use for metaids
            *
            * Users do not need to instantiate EnergyDiff manually, since it is done
            * by Editor. This constructor instantiates an empty EnergyDiff
            * object which is filled by
            *
            */
           explicit EnergyDiff(librdf_model *model, const std::string& local_uri);
   
           /*
            * @brief create a metaid for the energy differential annotation
            * @brief a new metaid for EnergyDiff
            */
           [[maybe_unused]] [[nodiscard]] std::string createMetaId() const;
   
           /*
            * @brief return vector of Source objects assocated with EnergyDiff
            * @return a vector of SourceParticipants
            */
           [[nodiscard]] const Sources &getSources() const;
   
           /*
            * @brief return vector of Sink objects assocated with EnergyDiff
            * @return a vector of SinkParticipants
            */
           [[nodiscard]] const Sinks &getSinks() const;
   
           /*
            * @brief converts the PhyicalForce object into a Triples object.
            * @return a Triples object containing the individual Triple objects of a EnergyDiff.
            *
            * When this method is called ownership of all RDF nodes gets transferred from
            * the caller to the returned Triples object.
            */
           [[nodiscard]] Triples toTriples() override;
   
           /*
            * @brief sets the about field of the EnergyDiff
            * @param metaid id for the energy differential. Result is relative to base_uri.
            * @return a reference to this EnergyDiff to enable the builder interface.
            *
            * A Resource object with a URI node is instantiated using the
            * the @param metaid.
            *
            * See Resource for more information about input format for @param metaid
            */
   //        EnergyDiff &about(std::string metaid);
   
           /*
            * @brief sets the physical property of the EnergyDiff
            * @parameter physicalProperty An instance of PhysicalProperty representing the
            * physical property term for the EnergyDiff.
            * @return a reference to this EnergyDiff to enable the builder interface.
            *
            * Prefer the other setPhysicalProperty method since it only requires a
            * string input and instantiates the PhysicalProperty for you.
            *
            * For developers. Consider removing.
            */
           [[maybe_unused]] EnergyDiff &setPhysicalProperty(PhysicalProperty physicalProperty);
   
           /*
            * @brief sets the physical property of the EnergyDiff
            * @param subject_metaid. The subject portion of the two triples produced by PhysicalProperty. Metaid of a model element.
            * @param A string representing the OPB term to use as the physical property. Like "OPB:OPB_1234"
            * @return a reference to this EnergyDiff to enable the builder interface.
            */
           EnergyDiff &setPhysicalProperty(std::string subject_metaid, std::string physical_property);
   
           /*
            * @brief add a SourceParticipant to the EnergyDiff.
            * @param metaid the ID for the SourceParticipant.
            * @param multiplier The multiplier argument for SourceParticipant
            * @param physical_entity_reference The physicalEntityReference argument for
            * the SourceParticipant.
            * @return a reference to this EnergyDiff to enable the builder interface.
            *
            * See SourceParticipant documentation for more details on arguments.
            */
           EnergyDiff &addSource(double multiplier, const std::string& physical_entity_reference);
   
           /*
            * @brief add a SinkParticipant to the EnergyDiff.
            * @param sink_metaid the ID for the SinkParticipant.
            * @param multiplier The multiplier argument for SinkParticipant
            * @param physical_entity_reference The physicalEntityReference argument for
            * the SinkParticipant.
            * @return a reference to this EnergyDiff to enable the builder interface.
            *
            * See SinkParticipant documentation for more details on arguments.
            */
           EnergyDiff & addSink(double multiplier, const std::string& physical_entity_reference);
   
   //        bool operator==(const EnergyDiff &rhs) const;
   //
   //        bool operator!=(const EnergyDiff &rhs) const;
   
           /*
            * @brief returns the number of sources associated with the
            * EnergyDiff
            * @return the integer number of sources
            */
           int getNumSources();
   
           /*
            * @brief returns the number of sinks associated with the
            * EnergyDiff
            * @return the integer number of sinks
            */
           int getNumSinks();
   
           bool operator==(const EnergyDiff &rhs) const;
   
           bool operator!=(const EnergyDiff &rhs) const;
       };
   }
   
   #endif //LIBOMEXMETA_PHYSICALFORCE_H
