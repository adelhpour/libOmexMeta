<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1Triples" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::Triples</compoundname>
    <includes refid="Triples_8h" local="no">Triples.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1Triples_1ac1bedb4d0e572623208e032280abd634" prot="private" static="no" mutable="no">
        <type>TripleVector</type>
        <definition>TripleVector omexmeta::Triples::triples_</definition>
        <argsstring></argsstring>
        <name>triples_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="234" column="22" bodyfile="src/omexmeta/include/omexmeta/Triples.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a4976c39ce5f0c652ef8b366fcdd92a58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triples::Triples</definition>
        <argsstring>()</argsstring>
        <name>Triples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a32ea34c1fd3bfe9887c2221377392efe" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triples::Triples</definition>
        <argsstring>(int size)</argsstring>
        <name>Triples</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>create an empty <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object big enough for </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> objects </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="44" column="18" bodyfile="src/omexmeta/Triples.cpp" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a733eea0f6a2c206eb96771bc7a8cb430" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triples::Triples</definition>
        <argsstring>(Triple &amp;triple)</argsstring>
        <name>Triples</name>
        <param>
          <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
          <declname>triple</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object from a single triple </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>triple</parametername>
</parameternamelist>
<parameterdescription>
<para>The triple to put into triples</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The triple is moved into element 0 of a new <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object. The <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> must be passed by reference so that the triple is moved directly, instead of copied and then moved into the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object (which is a memory leak). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="54" column="18" bodyfile="src/omexmeta/Triples.cpp" bodystart="12" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a71a3ff7b185a5420eabd9bf4e9637196" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triples::Triples</definition>
        <argsstring>(std::vector&lt; Triple &gt; triples)</argsstring>
        <name>Triples</name>
        <param>
          <type>std::vector&lt; <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &gt;</type>
          <declname>triples</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object directly from a std::vector&lt;Triple&gt; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="60" column="18" bodyfile="src/omexmeta/Triples.cpp" bodystart="16" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a8c6e00fe9e694d9c52e1fa37a82ae489" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::Triples::operator==</definition>
        <argsstring>(const Triples &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="62" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a8c9df0d37572179d682127cb7368dd82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::Triples::operator!=</definition>
        <argsstring>(const Triples &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="64" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a64e7f250d3199421c4306e9e8fbbc6e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triples::moveBack</definition>
        <argsstring>(Triple &amp;triple)</argsstring>
        <name>moveBack</name>
        <param>
          <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
          <declname>triple</declname>
        </param>
        <briefdescription>
<para>move a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> to the back of the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object. Analogous to push back but with move semantics. </para>
        </briefdescription>
        <detaileddescription>
<para>moves a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object to the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>triple</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object to move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The vector storing the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> is increased in size by 1 and the<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>triple</parametername>
</parameternamelist>
<parameterdescription>
<para>is moved into that slot. Therefore, ownership of the triple passes to the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object who is reposible for freeing the <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="71" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a106779ab1767a271708dba8d93165205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triples::emplace_back</definition>
        <argsstring>(UriHandler &amp;uriHandler, LibrdfNode subject, const PredicatePtr &amp;predicatePtr, const LibrdfNode &amp;resource)</argsstring>
        <name>emplace_back</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
          <declname>subject</declname>
        </param>
        <param>
          <type>const PredicatePtr &amp;</type>
          <declname>predicatePtr</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object from the necessary components and move it to the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>this method is heavily overloaded and has several signatures all of which result in the construction and emplacement of a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> at the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="78" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a5ba6faa259c9e07b06fa796ddcba0163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triples::emplace_back</definition>
        <argsstring>(UriHandler &amp;uriHandler, LibrdfNode subject, const Predicate &amp;predicate, const LibrdfNode &amp;resource)</argsstring>
        <name>emplace_back</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
          <declname>subject</declname>
        </param>
        <param>
          <type>const <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> &amp;</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object from the necessary components and move it to the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>this method is heavily overloaded and has several signatures all of which result in the construction and emplacement of a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> at the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="86" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1aaaa2909bb574deb4e5e129968d545ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triples::emplace_back</definition>
        <argsstring>(UriHandler &amp;uriHandler, LibrdfNode subject, BiomodelsBiologyQualifier predicate, const LibrdfNode &amp;resource)</argsstring>
        <name>emplace_back</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1BiomodelsBiologyQualifier" kindref="compound">BiomodelsBiologyQualifier</ref></type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object from the necessary components and move it to the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>this method is heavily overloaded and has several signatures all of which result in the construction and emplacement of a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> at the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="94" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="50" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a0b47dcbc4a0c608c7dcdb14f9db0706d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triples::emplace_back</definition>
        <argsstring>(UriHandler &amp;uriHandler, LibrdfNode subject, BiomodelsModelQualifier predicate, const LibrdfNode &amp;resource)</argsstring>
        <name>emplace_back</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1BiomodelsModelQualifier" kindref="compound">BiomodelsModelQualifier</ref></type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object from the necessary components and move it to the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>this method is heavily overloaded and has several signatures all of which result in the construction and emplacement of a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> at the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="102" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a4821b664c8a28da93a979008f8fc7438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triples::emplace_back</definition>
        <argsstring>(UriHandler &amp;uriHandler, LibrdfNode subject, DCTerm predicate, const LibrdfNode &amp;resource)</argsstring>
        <name>emplace_back</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1DCTerm" kindref="compound">DCTerm</ref></type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object from the necessary components and move it to the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>this method is heavily overloaded and has several signatures all of which result in the construction and emplacement of a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> at the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="110" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a2b12527ab68f7d9a8a250dbb952e741e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triples::emplace_back</definition>
        <argsstring>(UriHandler &amp;uriHandler, LibrdfNode subject, SemSim predicate, const LibrdfNode &amp;resource)</argsstring>
        <name>emplace_back</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref></type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1SemSim" kindref="compound">SemSim</ref></type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object from the necessary components and move it to the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>this method is heavily overloaded and has several signatures all of which result in the construction and emplacement of a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> at the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="118" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a26e4fdcab8b0f3473e098846441adfe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triples::emplace_back</definition>
        <argsstring>(UriHandler &amp;uriHandler, librdf_node *subject, librdf_node *predicate, librdf_node *resource)</argsstring>
        <name>emplace_back</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="structraptor__term" kindref="compound">librdf_node</ref> *</type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="structraptor__term" kindref="compound">librdf_node</ref> *</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type><ref refid="structraptor__term" kindref="compound">librdf_node</ref> *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>construct a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object from the necessary components and move it to the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>this method is heavily overloaded and has several signatures all of which result in the construction and emplacement of a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> at the back of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="125" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a5234882414a2aaaca603eacd805df3d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; omexmeta::Triples::getSubjectsStr</definition>
        <argsstring>()</argsstring>
        <name>getSubjectsStr</name>
        <briefdescription>
<para>get all subjects as strings </para>
        </briefdescription>
        <detaileddescription>
<para>we do not return the subject itself because subjects cannot be copied, which complicates matters. <simplesect kind="return"><para>All subject uri&apos;s as strings in a std::vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="133" column="21" bodyfile="src/omexmeta/Triples.cpp" bodystart="72" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a63639c08caac19e6c5cbf30bb28292d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; omexmeta::Triples::getPredicates</definition>
        <argsstring>()</argsstring>
        <name>getPredicates</name>
        <briefdescription>
<para>get all predicates as strings </para>
        </briefdescription>
        <detaileddescription>
<para>we do not return the predicate itself because <ref refid="classomexmeta_1_1Predicate" kindref="compound">Predicate</ref> objects cannot be copied. <simplesect kind="return"><para>All predicate uri&apos;s as strings in a std::vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="141" column="21" bodyfile="src/omexmeta/Triples.cpp" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1aa875120a73cb1618be9e699e8bfb08c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; omexmeta::Triples::getResources</definition>
        <argsstring>()</argsstring>
        <name>getResources</name>
        <briefdescription>
<para>get all resources as strings </para>
        </briefdescription>
        <detaileddescription>
<para>we do not return the LibrdfNode itself because LibrdfNode objects cannot be copied. <simplesect kind="return"><para>All resource uri&apos;s as strings in a std::vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="149" column="21" bodyfile="src/omexmeta/Triples.cpp" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1adc86427b3563d04849336a8da7566451" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::Triples::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>get the number of triples in the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the integer number of triples in the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="155" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1aa6735eb506ff0d5a3179fab3af3b2602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TripleVector::iterator</type>
        <definition>TripleVector::iterator omexmeta::Triples::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>the begin iterator for a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object </para>
        </briefdescription>
        <detaileddescription>
<para>this method is simply forwarded on to std::vector::begin() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="161" column="32" bodyfile="src/omexmeta/Triples.cpp" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a4312337b242280bcb119908c0334bfd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TripleVector::iterator</type>
        <definition>TripleVector::iterator omexmeta::Triples::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>the end iterator for a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object </para>
        </briefdescription>
        <detaileddescription>
<para>this method is simply forwarded on to std::vector::end() </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="167" column="32" bodyfile="src/omexmeta/Triples.cpp" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1ad2510c5b335b0266b05507c53bcc64af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::Triples::str</definition>
        <argsstring>(const std::string &amp;format=&quot;turtle&quot;, std::string base=(std::filesystem::current_path()/=&quot;annotations.rdf&quot;).string(), std::string omex_name=&quot;NewOmex.omex/&quot;, std::string model_name=&quot;NewModel.xml#&quot;)</argsstring>
        <name>str</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;turtle&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>base</declname>
          <defval>(std::filesystem::current_path()/=&quot;annotations.rdf&quot;).string()</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>omex_name</declname>
          <defval>&quot;NewOmex.omex/&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>model_name</declname>
          <defval>&quot;NewModel.xml#&quot;</defval>
        </param>
        <briefdescription>
<para>Serialize the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object to. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the format to serialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>argument for <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> graph. <ref refid="classThis" kindref="compound">This</ref> is hidden so basically irrelevant. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>omex_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the omex portion of the current local uri. Default is NewOmex.omex </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the omex portion of the current local uri. Default is NewModel.xml</para>
</parameterdescription>
</parameteritem>
</parameterlist>
See RDF::str for more details regarding arguments. <ref refid="classThis" kindref="compound">This</ref> method is only for checking to see what <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object looks like when serialized. The annotations are not added to the main <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> graph. <ref refid="classThis" kindref="compound">This</ref> is analogous to <ref refid="classomexmeta_1_1Triple_1a2cabbc7a28348a9472bd50f059469183" kindref="member">Triple::str</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="180" column="21" bodyfile="src/omexmeta/Triples.cpp" bodystart="109" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1ad0c5839b0f49d6427cf53004baf9b0f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triples::freeTriples</definition>
        <argsstring>()</argsstring>
        <name>freeTriples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="186" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="185" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a5dad8f2cde0a3f6c0ce341338f80b0cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref></type>
        <definition>Triple omexmeta::Triples::pop</definition>
        <argsstring>()</argsstring>
        <name>pop</name>
        <briefdescription>
<para>moves one triple of the end of triples </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the triple from the end of the triples vector</para>
</simplesect>
No copies are made. <ref refid="classThis" kindref="compound">This</ref> is deliberate as it reduces risk of memory issues. When you pop, you remove from the end of the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object and return it. <ref refid="classThis" kindref="compound">This</ref> means that responsibility for freeing the returned <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> switches to the caller. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="196" column="16" bodyfile="src/omexmeta/Triples.cpp" bodystart="175" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a02d9829c76b2f7e72263b55c7cc9b640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triples::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>getter operator for <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to the <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> at index <computeroutput>index</computeroutput></para>
</simplesect>
A copy is made of the <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> you want to return. To get a reference without copying see <ref refid="classomexmeta_1_1Triples_1a5dad8f2cde0a3f6c0ce341338f80b0cd" kindref="member">Triples::pop()</ref>. Remember that iterating over a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object and making copies will cause complications with freeing the objects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="206" column="16" bodyfile="src/omexmeta/Triples.cpp" bodystart="196" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a43d540423a436986d9f72d7cf0f02d72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>const Triple &amp; omexmeta::Triples::operator[]</definition>
        <argsstring>(int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="208" column="22" bodyfile="src/omexmeta/Triples.cpp" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a48ab93d0e38e3cfcb4eac9264b047f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::Triples::isEmpty</definition>
        <argsstring>()</argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>indicates whether <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object doesn&apos;t contain any <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> objects</para>
</simplesect>
Useful for iterating over <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> in a while loop without using the <computeroutput>[]</computeroutput> operator, which makes unwanted copies that causes memory issues. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="217" column="14" bodyfile="src/omexmeta/Triples.cpp" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triples_1a1f7ba9d5cd575ba5c63ed9dbbd1f279c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::Triples::capacity</definition>
        <argsstring>()</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>move the from <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> object out of the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> from position 0 in <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref></para>
</simplesect>
caller is responsible for <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> resources</para>
<para>forwarded on to std::vector::capacity <simplesect kind="return"><para>int the size of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> currently allowed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triples.h" line="230" column="13" bodyfile="src/omexmeta/Triples.cpp" bodystart="216" bodyend="218"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object is a collection of <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> objects. </para>
    </briefdescription>
    <detaileddescription>
<para>the implementation of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> is hampered by the inability to clone <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> objects. Instead triples must use move semantics to get <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> in or out of a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object. Under the hood, the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object is just a std::vector&lt;Triple&gt;. </para>
    </detaileddescription>
    <location file="src/omexmeta/include/omexmeta/Triples.h" line="35" column="5" bodyfile="src/omexmeta/include/omexmeta/Triples.h" bodystart="35" bodyend="235"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1Triples_1aa6735eb506ff0d5a3179fab3af3b2602" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>begin</name></member>
      <member refid="classomexmeta_1_1Triples_1a1f7ba9d5cd575ba5c63ed9dbbd1f279c" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>capacity</name></member>
      <member refid="classomexmeta_1_1Triples_1a106779ab1767a271708dba8d93165205" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>emplace_back</name></member>
      <member refid="classomexmeta_1_1Triples_1a5ba6faa259c9e07b06fa796ddcba0163" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>emplace_back</name></member>
      <member refid="classomexmeta_1_1Triples_1aaaa2909bb574deb4e5e129968d545ece" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>emplace_back</name></member>
      <member refid="classomexmeta_1_1Triples_1a0b47dcbc4a0c608c7dcdb14f9db0706d" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>emplace_back</name></member>
      <member refid="classomexmeta_1_1Triples_1a4821b664c8a28da93a979008f8fc7438" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>emplace_back</name></member>
      <member refid="classomexmeta_1_1Triples_1a2b12527ab68f7d9a8a250dbb952e741e" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>emplace_back</name></member>
      <member refid="classomexmeta_1_1Triples_1a26e4fdcab8b0f3473e098846441adfe3" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>emplace_back</name></member>
      <member refid="classomexmeta_1_1Triples_1a4312337b242280bcb119908c0334bfd8" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>end</name></member>
      <member refid="classomexmeta_1_1Triples_1ad0c5839b0f49d6427cf53004baf9b0f4" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>freeTriples</name></member>
      <member refid="classomexmeta_1_1Triples_1a63639c08caac19e6c5cbf30bb28292d0" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>getPredicates</name></member>
      <member refid="classomexmeta_1_1Triples_1aa875120a73cb1618be9e699e8bfb08c4" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>getResources</name></member>
      <member refid="classomexmeta_1_1Triples_1a5234882414a2aaaca603eacd805df3d6" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>getSubjectsStr</name></member>
      <member refid="classomexmeta_1_1Triples_1a48ab93d0e38e3cfcb4eac9264b047f0a" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>isEmpty</name></member>
      <member refid="classomexmeta_1_1Triples_1a64e7f250d3199421c4306e9e8fbbc6e5" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>moveBack</name></member>
      <member refid="classomexmeta_1_1Triples_1a8c9df0d37572179d682127cb7368dd82" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1Triples_1a8c6e00fe9e694d9c52e1fa37a82ae489" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1Triples_1a02d9829c76b2f7e72263b55c7cc9b640" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>operator[]</name></member>
      <member refid="classomexmeta_1_1Triples_1a43d540423a436986d9f72d7cf0f02d72" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>operator[]</name></member>
      <member refid="classomexmeta_1_1Triples_1a5dad8f2cde0a3f6c0ce341338f80b0cd" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>pop</name></member>
      <member refid="classomexmeta_1_1Triples_1adc86427b3563d04849336a8da7566451" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>size</name></member>
      <member refid="classomexmeta_1_1Triples_1ad2510c5b335b0266b05507c53bcc64af" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>str</name></member>
      <member refid="classomexmeta_1_1Triples_1a4976c39ce5f0c652ef8b366fcdd92a58" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>Triples</name></member>
      <member refid="classomexmeta_1_1Triples_1a32ea34c1fd3bfe9887c2221377392efe" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>Triples</name></member>
      <member refid="classomexmeta_1_1Triples_1a733eea0f6a2c206eb96771bc7a8cb430" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>Triples</name></member>
      <member refid="classomexmeta_1_1Triples_1a71a3ff7b185a5420eabd9bf4e9637196" prot="public" virt="non-virtual"><scope>omexmeta::Triples</scope><name>Triples</name></member>
      <member refid="classomexmeta_1_1Triples_1ac1bedb4d0e572623208e032280abd634" prot="private" virt="non-virtual"><scope>omexmeta::Triples</scope><name>triples_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
