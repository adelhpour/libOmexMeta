<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1RDF" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::RDF</compoundname>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classomexmeta_1_1RDF_1ad31e5bb632eeaa00a3ac0e69c5e4f89c" prot="private" static="no">
        <type>std::unordered_map&lt; std::string, std::string &gt;</type>
        <definition>typedef std::unordered_map&lt;std::string, std::string&gt; omexmeta::RDF::NamespaceMap</definition>
        <argsstring></argsstring>
        <name>NamespaceMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="45" column="36" bodyfile="src/omexmeta/include/omexmeta/RDF.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1RDF_1a345bcba83c6928f750ba732b6e6c748b" prot="private" static="no" mutable="no">
        <type><ref refid="classredland_1_1LibrdfStorage" kindref="compound">LibrdfStorage</ref></type>
        <definition>LibrdfStorage omexmeta::RDF::storage_</definition>
        <argsstring></argsstring>
        <name>storage_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="40" column="23" bodyfile="src/omexmeta/include/omexmeta/RDF.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1RDF_1a88a09d66eb9d6881fd77e9ef6133b4e6" prot="private" static="no" mutable="no">
        <type><ref refid="classredland_1_1LibrdfModel" kindref="compound">LibrdfModel</ref></type>
        <definition>LibrdfModel omexmeta::RDF::model_</definition>
        <argsstring></argsstring>
        <name>model_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="41" column="21" bodyfile="src/omexmeta/include/omexmeta/RDF.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1RDF_1ac7eaa8a5c0fdf7b563ba56550fede82a" prot="private" static="no" mutable="no">
        <type>OmexMetaXmlType</type>
        <definition>OmexMetaXmlType omexmeta::RDF::xmlType</definition>
        <argsstring></argsstring>
        <name>xmlType</name>
        <initializer>= OMEXMETA_TYPE_NOTSET</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="43" column="25" bodyfile="src/omexmeta/include/omexmeta/RDF.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1RDF_1a54d08d61cfd6eab43c2034e115150a59" prot="private" static="no" mutable="no">
        <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref></type>
        <definition>UriHandler omexmeta::RDF::uriHandler_</definition>
        <argsstring></argsstring>
        <name>uriHandler_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="47" column="20" bodyfile="src/omexmeta/include/omexmeta/RDF.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1RDF_1a1979d7d70a4c20f2e63f00c7fa668b1f" prot="public" static="no" mutable="no">
        <type>NamespaceMap</type>
        <definition>NamespaceMap omexmeta::RDF::namespaces_</definition>
        <argsstring></argsstring>
        <name>namespaces_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="78" column="22" bodyfile="src/omexmeta/include/omexmeta/RDF.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1RDF_1a82bc53feb93e1243970400fd104174da" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; omexmeta::RDF::seen_namespaces_</definition>
        <argsstring></argsstring>
        <name>seen_namespaces_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="79" column="21" bodyfile="src/omexmeta/include/omexmeta/RDF.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1RDF_1a59014bbb45a43dbfa760480f1713c473" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string omexmeta::RDF::OMEXlib_</definition>
        <argsstring></argsstring>
        <name>OMEXlib_</name>
        <initializer>= &quot;http://OMEXlibrary.org/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="80" column="27" bodyfile="src/omexmeta/include/omexmeta/RDF.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a91574f34be1fe3054f4f7ce6830098b4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::classifyXmlType</definition>
        <argsstring>(const std::string &amp;xml, const std::string &amp;input_format)</argsstring>
        <name>classifyXmlType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>xml</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>input_format</declname>
        </param>
        <briefdescription>
<para>autoset the xmlType variable based on xml content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="57" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="367" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a71b3dd4837a918a273f8d15aaa5c6c7b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::classifyXmlTypeFromFile</definition>
        <argsstring>(const std::string &amp;xml_file, const std::string &amp;input_format)</argsstring>
        <name>classifyXmlTypeFromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>xml_file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>input_format</declname>
        </param>
        <briefdescription>
<para>reads xml from file before calling classifyXmlType </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="62" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="390" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ade6ca329272d5de27496183a81bbec8a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::extractSemanticInformationFromSBML</definition>
        <argsstring>(const std::string &amp;sbml)</argsstring>
        <name>extractSemanticInformationFromSBML</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sbml</declname>
        </param>
        <briefdescription>
<para>pull semantic information out of the sbml int the <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> graph </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="68" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="401" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1add8f3d957f24a26785f29b85d50f4399" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::freeRDF</definition>
        <argsstring>()</argsstring>
        <name>freeRDF</name>
        <briefdescription>
<para>release memory consumed by <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Memory consumed by <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> is destructed using RAII so users normally do not need this function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="75" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="19" bodyend="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a6979e6ca2688cf5cae1e9e1cf3a7309a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>OmexMetaXmlType</type>
        <definition>OmexMetaXmlType omexmeta::RDF::getXmlType</definition>
        <argsstring>() const</argsstring>
        <name>getXmlType</name>
        <briefdescription>
<para>getter for xmlType attribue. </para>
        </briefdescription>
        <detaileddescription>
<para>when the rdf graph is sbml, it will return OMEXMETA_TYPE_SBML. When cellML it will return OMEXMETA_TYPE_CELLML. Otherwise it is OMEXMETA_TYPE_UNKNOWN. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="89" column="25" bodyfile="src/omexmeta/RDF.cpp" bodystart="359" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1add69d33d544dc31789b2ff0a71182a84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::RDF::operator==</definition>
        <argsstring>(const RDF &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="90" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="418" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ac652b39964477c8ea69e5218f2203013" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::RDF::operator!=</definition>
        <argsstring>(const RDF &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="91" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="421" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a8fc7b226619580fac47afce0a7ec2628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::setXmlType</definition>
        <argsstring>(OmexMetaXmlType xmlType)</argsstring>
        <name>setXmlType</name>
        <param>
          <type>OmexMetaXmlType</type>
          <declname>xmlType</declname>
        </param>
        <briefdescription>
<para>set the xml type for the current graph. </para>
        </briefdescription>
        <detaileddescription>
<para>If you have been reading from an SBML you cannot then read from another format (such as cellml). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="97" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="363" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a60b4a0a8c0c4f30a9cc71f9899bffabc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::RDF::getRepositoryUri</definition>
        <argsstring>() const</argsstring>
        <name>getRepositoryUri</name>
        <briefdescription>
<para>getter for repository uri which defaults to &quot;http://omex-library.org/&quot; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="103" column="27" bodyfile="src/omexmeta/RDF.cpp" bodystart="331" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ab1542acaf8d67ce96ace2825600ac600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::setRepositoryUri</definition>
        <argsstring>(const std::string &amp;repositoryName)</argsstring>
        <name>setRepositoryUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>repositoryName</declname>
        </param>
        <briefdescription>
<para>setter for the repository uri which defaults to &quot;http://omex-library.org/&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>repositoryName</parametername>
</parameternamelist>
<parameterdescription>
<para>the repository uri. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="110" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="335" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a1b3bd1292e77c1d87720f854ec5a04bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::RDF::getArchiveUri</definition>
        <argsstring>() const</argsstring>
        <name>getArchiveUri</name>
        <briefdescription>
<para>getter for archiveUri attribute. </para>
        </briefdescription>
        <detaileddescription>
<para>default to <ulink url="http://omex-library.org/NewOmex.omex/">http://omex-library.org/NewOmex.omex/</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="116" column="27" bodyfile="src/omexmeta/RDF.cpp" bodystart="339" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a1670aa8c6379324aa414d0c56cfa7e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::setArchiveUri</definition>
        <argsstring>(const std::string &amp;archiveName)</argsstring>
        <name>setArchiveUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>archiveName</declname>
        </param>
        <briefdescription>
<para>setter for archiveUri attribute. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>archiveName</parametername>
</parameternamelist>
<parameterdescription>
<para>the new name for archive uri attribute  default to <ulink url="http://omex-library.org/NewOmex.omex/">http://omex-library.org/NewOmex.omex/</ulink> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="123" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="343" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ac579ac8b79eb7d374a9077114837d2ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::RDF::getModelUri</definition>
        <argsstring>() const</argsstring>
        <name>getModelUri</name>
        <briefdescription>
<para>getter for model uri. </para>
        </briefdescription>
        <detaileddescription>
<para>defaults to <ulink url="http://omex-library.org/NewOmex.omex/NewModel.xml">http://omex-library.org/NewOmex.omex/NewModel.xml</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="129" column="27" bodyfile="src/omexmeta/RDF.cpp" bodystart="347" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ad5310903d0e1a7a7ee890478f18b6181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::setModelUri</definition>
        <argsstring>(std::string modelName)</argsstring>
        <name>setModelUri</name>
        <param>
          <type>std::string</type>
          <declname>modelName</declname>
        </param>
        <briefdescription>
<para>setter for model uri. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>modelName</parametername>
</parameternamelist>
<parameterdescription>
<para>string for new model uri.  defaults to <ulink url="http://omex-library.org/NewOmex.omex/NewModel.xml">http://omex-library.org/NewOmex.omex/NewModel.xml</ulink> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="136" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="351" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a58b64a5972f74564994028504d8d227c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::RDF::getLocalUri</definition>
        <argsstring>() const</argsstring>
        <name>getLocalUri</name>
        <briefdescription>
<para>getter for local uri attribute. </para>
        </briefdescription>
        <detaileddescription>
<para>defaults to <ulink url="http://omex-library.org/NewOmex.omex/NewModel.rdf#">http://omex-library.org/NewOmex.omex/NewModel.rdf#</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="142" column="27" bodyfile="src/omexmeta/RDF.cpp" bodystart="355" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1aecb90e51830082f78ff055c045f4b439" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::RDF::RDF</definition>
        <argsstring>(const std::string &amp;storage_type=&quot;memory&quot;, const std::string &amp;storage_name=&quot;SemsimStore&quot;, const char *storage_options=nullptr, const char *model_options=nullptr)</argsstring>
        <name>RDF</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>storage_type</declname>
          <defval>&quot;memory&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>storage_name</declname>
          <defval>&quot;SemsimStore&quot;</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>storage_options</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>model_options</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>constructor for <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> class </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>storage_type.</parametername>
</parameternamelist>
<parameterdescription>
<para>Defaults to memory. Other options include: &quot;hashes&quot;, &quot;file&quot;, &quot;mysql&quot;, &quot;postgresql&quot;, &quot;sqlite&quot;, &quot;uri&quot;, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>storage_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name used for storage. When storage is not internally held in memory, this becomes the name of the file or database. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>storage_options</parametername>
</parameternamelist>
<parameterdescription>
<para>options that get passed on to storage. Please study <ulink url="http://librdf.org/docs/api/redland-storage-modules.html">http://librdf.org/docs/api/redland-storage-modules.html</ulink> for more information. @model_options options that get passed to the model. Please see <ulink url="http://librdf.org/docs/api/index.html">http://librdf.org/docs/api/index.html</ulink> for more details. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="160" column="18" bodyfile="src/omexmeta/RDF.cpp" bodystart="12" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a87b1eb7fe49f4928e61c399edf49e09c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::RDF::~RDF</definition>
        <argsstring>()</argsstring>
        <name>~RDF</name>
        <briefdescription>
<para>destructor for <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="167" column="9" bodyfile="src/omexmeta/RDF.cpp" bodystart="24" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ad95c4a8588988efe399c7f984e304990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::RDF::RDF</definition>
        <argsstring>(const RDF &amp;rdf)=delete</argsstring>
        <name>RDF</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> &amp;</type>
          <declname>rdf</declname>
        </param>
        <briefdescription>
<para>copy constructor for <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> class </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> instances are not copyable due to restrictions within the redland libraries. You must instead move <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> objects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="175" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a6490b2ea0d10e3026bea587a305b7fb9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>omexmeta::RDF::RDF</definition>
        <argsstring>(RDF &amp;&amp;rdf) noexcept</argsstring>
        <name>RDF</name>
        <param>
          <type><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> &amp;&amp;</type>
          <declname>rdf</declname>
        </param>
        <briefdescription>
<para>move constructor for <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> class </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="180" column="9" bodyfile="src/omexmeta/RDF.cpp" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a9d1b20d798969d3c1dac412c621247b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> &amp;</type>
        <definition>RDF&amp; omexmeta::RDF::operator=</definition>
        <argsstring>(const RDF &amp;rdf)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> &amp;</type>
          <declname>rdf</declname>
        </param>
        <briefdescription>
<para>copy assignment constructor for <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> ojects </para>
        </briefdescription>
        <detaileddescription>
<para>Copy assignment functionality is prohibited for <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> objects. Use move semantics insead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="187" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ae3739bda3be0986547c31559381f3df4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> &amp;</type>
        <definition>RDF &amp; omexmeta::RDF::operator=</definition>
        <argsstring>(RDF &amp;&amp;rdf) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> &amp;&amp;</type>
          <declname>rdf</declname>
        </param>
        <briefdescription>
<para>move assignment operator for <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="192" column="13" bodyfile="src/omexmeta/RDF.cpp" bodystart="35" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a63247bb3a05957abf7320c060543c3ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::RDF::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>returns the number of triples currently present in the <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="198" column="13" bodyfile="src/omexmeta/RDF.cpp" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ab6525e8db606ffd48425b05ad2a204d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::RDF::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>indicator for whether the <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> graph is empty </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> graph has no triples, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="204" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a9a29912bc44d47d371a2357b75194fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::addFromString</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;format=&quot;guess&quot;)</argsstring>
        <name>addFromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;guess&quot;</defval>
        </param>
        <briefdescription>
<para>non-static variant of <ref refid="classomexmeta_1_1RDF_1a9d91b3134cdcc6dfef6d62b7b09d8da2" kindref="member">RDF::fromString()</ref>. Reads rdf into an <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> instance. See <ref refid="classomexmeta_1_1RDF_1a9d91b3134cdcc6dfef6d62b7b09d8da2" kindref="member">RDF::fromString()</ref> for argument requirements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="219" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="98" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1af99201be3782319d32e963ca7bed5b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::addFromUri</definition>
        <argsstring>(const std::string &amp;uri_string, const std::string &amp;format=&quot;guess&quot;)</argsstring>
        <name>addFromUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri_string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;guess&quot;</defval>
        </param>
        <briefdescription>
<para>non-static counterpart of <ref refid="classomexmeta_1_1RDF_1a03906aa5c3b9429a2afdbe0ad2be21e6" kindref="member">RDF::fromUri</ref>. Downloads and parses rdf from a URI. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classomexmeta_1_1RDF_1a03906aa5c3b9429a2afdbe0ad2be21e6" kindref="member">RDF::fromUri</ref> for details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="239" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="150" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ac88eeb1a0f6911a2c1e4c43cef1b9047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::addFromFile</definition>
        <argsstring>(const std::string &amp;filename, const std::string &amp;format)</argsstring>
        <name>addFromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>non-static counter part of <ref refid="classomexmeta_1_1RDF_1a98a1da84161a7935bf38ec5e5d34e91f" kindref="member">RDF::fromFile</ref>. Reads rdf from annotations in a file </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename to read as string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the format of the <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> in filename </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an instantiated <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> object  Uses LibrdfParser::fromFile under the hood </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="257" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="179" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1af5f598560ab2a4ebe661f9bdb8665755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; std::string, std::string &gt;</type>
        <definition>std::unordered_map&lt; std::string, std::string &gt; omexmeta::RDF::propagateNamespacesFromParser</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;seen_namespaces)</argsstring>
        <name>propagateNamespacesFromParser</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>seen_namespaces</declname>
        </param>
        <briefdescription>
<para>compared namespaces seen with namespaces known and ensures models that use a known namespace use that namespace. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seen_namespaces</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of strings of namespaces the parser has seen before. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="280" column="9" bodyfile="src/omexmeta/RDF.cpp" bodystart="201" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a53bc4c91a3c39eef9b27886873badca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::RDF::toString</definition>
        <argsstring>(const std::string &amp;format=&quot;turtle&quot;, const char *mime_type=nullptr, const char *type_uri=nullptr)</argsstring>
        <name>toString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;turtle&quot;</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>mime_type</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>type_uri</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>serialize <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> graph to string </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the expected output format. Options include: &quot;ntriples&quot;, &quot;turtle&quot;, &quot;rdfxml-xmp&quot;, &quot;rdfxml-abbrev&quot;, &quot;rdfxml&quot;, &quot;dot&quot;, &quot;json-triples&quot;, &quot;json&quot;, &quot;nquads&quot;, &quot;html&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="288" column="21" bodyfile="src/omexmeta/RDF.cpp" bodystart="219" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a42a7be2a6261f03dc275b24a152dcaae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::toFile</definition>
        <argsstring>(const std::string &amp;filename, const std::string &amp;format=&quot;turtle&quot;, const char *mime_type=nullptr, const char *type_uri=nullptr)</argsstring>
        <name>toFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;turtle&quot;</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>mime_type</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>type_uri</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Write annotations to file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the expected output format. Options include: &quot;ntriples&quot;, &quot;turtle&quot;, &quot;rdfxml-xmp&quot;, &quot;rdfxml-abbrev&quot;, &quot;rdfxml&quot;, &quot;dot&quot;, &quot;json-triples&quot;, &quot;json&quot;, &quot;nquads&quot;, &quot;html&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>full path of file to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mime_type</parametername>
</parameternamelist>
<parameterdescription>
<para>optional valid mime </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>optional type uri </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="301" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="240" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ac09044c8a4c1af4f9536dbf29b4c3f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref></type>
        <definition>Editor omexmeta::RDF::toEditor</definition>
        <argsstring>(const std::string &amp;xml, bool generate_new_metaids=false, bool sbml_semantic_extraction=true)</argsstring>
        <name>toEditor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>xml</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>generate_new_metaids</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>sbml_semantic_extraction</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>instantiate an <ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xml</parametername>
</parameternamelist>
<parameterdescription>
<para>the xml you want to open for editing. <ref refid="classThis" kindref="compound">This</ref> can be any type of xml document, but SBML and CellML are most common. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>generate_new_metaids</parametername>
</parameternamelist>
<parameterdescription>
<para>When true, will add metaids onto a copy of the xml source code for annotation. Default = false. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OmexMetaXmlType</parametername>
</parameternamelist>
<parameterdescription>
<para>an indicator enum specifying whether the xml is sbml, cellml or unknown. Default is &quot;OMEXMETA_TYPE_NOTSET&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="311" column="16" bodyfile="src/omexmeta/RDF.cpp" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a80c6ad0b9c9daddd5e2150ababcc7476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref> *</type>
        <definition>Editor * omexmeta::RDF::toEditorPtr</definition>
        <argsstring>(const std::string &amp;xml, bool generate_new_metaids=false, bool sbml_semantic_extraction=true)</argsstring>
        <name>toEditorPtr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>xml</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>generate_new_metaids</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>sbml_semantic_extraction</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="313" column="16" bodyfile="src/omexmeta/RDF.cpp" bodystart="261" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a8007b0ce5729c7dd3f8cab86d42216f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>librdf_model *</type>
        <definition>librdf_model * omexmeta::RDF::getModel</definition>
        <argsstring>() const</argsstring>
        <name>getModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="315" column="22" bodyfile="src/omexmeta/RDF.cpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a71b0e5f3b85a87c2231e7700d86060c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>librdf_storage *</type>
        <definition>librdf_storage * omexmeta::RDF::getStorage</definition>
        <argsstring>() const</argsstring>
        <name>getStorage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="317" column="24" bodyfile="src/omexmeta/RDF.cpp" bodystart="267" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a711f228bb86c5cbf9740f64b8633d04c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::RDF::commitTransaction</definition>
        <argsstring>() const</argsstring>
        <name>commitTransaction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="319" column="13" bodyfile="src/omexmeta/RDF.cpp" bodystart="271" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1afa2b148ecb235b3ac9497fa3b528d2ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::RDF::startTransaction</definition>
        <argsstring>() const</argsstring>
        <name>startTransaction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="321" column="13" bodyfile="src/omexmeta/RDF.cpp" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ad30bbe5c9b274713f87d4d4a5f2b28e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * omexmeta::RDF::getTransactionHandle</definition>
        <argsstring>() const</argsstring>
        <name>getTransactionHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="323" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="279" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a278b78d5b1b88397c2eb4143f23dab8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::RDF::startTransactionWithHandle</definition>
        <argsstring>(void *handle) const</argsstring>
        <name>startTransactionWithHandle</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="325" column="13" bodyfile="src/omexmeta/RDF.cpp" bodystart="283" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1af5c7c6104496c09762518d56e94e6048" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::RDF::getTransactionRollback</definition>
        <argsstring>() const</argsstring>
        <name>getTransactionRollback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="327" column="13" bodyfile="src/omexmeta/RDF.cpp" bodystart="287" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ab168be2c14d53c3fc94024121dc88ba6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::RDF::query</definition>
        <argsstring>(const std::string &amp;query_str, const std::string &amp;results_format) const</argsstring>
        <name>query</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>query_str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>results_format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="331" column="21" bodyfile="src/omexmeta/RDF.cpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a9ecf58f64ea449a01457bfc28bb53e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::addTriple</definition>
        <argsstring>(const Triple &amp;triple)</argsstring>
        <name>addTriple</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
          <declname>triple</declname>
        </param>
        <briefdescription>
<para>add a <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> to the current model </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="336" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="425" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a7a6ad7d96f3104da8356f02ac6705941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::addTriples</definition>
        <argsstring>(const Triples &amp;triples)</argsstring>
        <name>addTriples</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> &amp;</type>
          <declname>triples</declname>
        </param>
        <briefdescription>
<para>add a set of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> to the current model </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="341" column="14" bodyfile="src/omexmeta/RDF.cpp" bodystart="433" bodyend="441"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a9d91b3134cdcc6dfef6d62b7b09d8da2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref></type>
        <definition>RDF omexmeta::RDF::fromString</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;format=&quot;guess&quot;)</argsstring>
        <name>fromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;guess&quot;</defval>
        </param>
        <briefdescription>
<para>instantiate an <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> instance and read annotations from a string. <ref refid="classThis" kindref="compound">This</ref> is a static method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the string containing annotations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>which format str is in. Default=&quot;guess&quot; : try to guess. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="212" column="20" bodyfile="src/omexmeta/RDF.cpp" bodystart="53" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a03906aa5c3b9429a2afdbe0ad2be21e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref></type>
        <definition>RDF omexmeta::RDF::fromUri</definition>
        <argsstring>(const std::string &amp;uri_string, const std::string &amp;format=&quot;guess&quot;)</argsstring>
        <name>fromUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri_string</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;guess&quot;</defval>
        </param>
        <briefdescription>
<para>parse <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> directly from a uri </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uri_string</parametername>
</parameternamelist>
<parameterdescription>
<para>the uri to download containing <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the format that the <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> is in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> an instantiated <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> object.</para>
</simplesect>
downloads uri from the internet and creates an <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> graph. See Librdf::parseUri() for more details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="231" column="20" bodyfile="src/omexmeta/RDF.cpp" bodystart="129" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a98a1da84161a7935bf38ec5e5d34e91f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref></type>
        <definition>RDF omexmeta::RDF::fromFile</definition>
        <argsstring>(const std::string &amp;filename, const std::string &amp;format)</argsstring>
        <name>fromFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>read rdf from annotations in a file </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename to read as string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the format of the <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> in filename </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an instantiated <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> object  Uses LibrdfParser::fromFile under the hood </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="248" column="20" bodyfile="src/omexmeta/RDF.cpp" bodystart="163" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ab2dadc7ff1cf25edbb401b2c879a21b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::RDF::fromString</definition>
        <argsstring>(RDF *rdf, const std::string &amp;str, const std::string &amp;format, std::string base_uri=&quot;Annotations.rdf&quot;)</argsstring>
        <name>fromString</name>
        <param>
          <type><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> *</type>
          <declname>rdf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>base_uri</declname>
          <defval>&quot;Annotations.rdf&quot;</defval>
        </param>
        <briefdescription>
<para>non static version of <ref refid="classomexmeta_1_1RDF_1a9d91b3134cdcc6dfef6d62b7b09d8da2" kindref="member">RDF::fromString</ref> that takes a * <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> pointer object and modifies in place. </para>
        </briefdescription>
        <detaileddescription>
<para>Primarily used for C API For developers: look into replacing this function fully with <ref refid="classomexmeta_1_1RDF_1a9a29912bc44d47d371a2357b75194fc3" kindref="member">RDF::addFromString()</ref> method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="269" column="9" bodyfile="src/omexmeta/RDF.cpp" bodystart="79" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1ae01ed260e02eda2141ffe1288f78c177" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostringstream</type>
        <definition>std::ostringstream omexmeta::RDF::listOptions</definition>
        <argsstring>()</argsstring>
        <name>listOptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="329" column="35" bodyfile="src/omexmeta/RDF.cpp" bodystart="291" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1aecf658fb2442857994104693b3ad0e32" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::RDF::equals</definition>
        <argsstring>(RDF *actual, const std::string &amp;expected, const std::string &amp;format=&quot;turtle&quot;)</argsstring>
        <name>equals</name>
        <param>
          <type><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> *</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;turtle&quot;</defval>
        </param>
        <briefdescription>
<para>test for equality between </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>actual</parametername>
</parameternamelist>
<parameterdescription>
<para>and</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="346" column="21" bodyfile="src/omexmeta/RDF.cpp" bodystart="455" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1acfa31de8762c1ddbf53eda0c3e1af30a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::RDF::equals</definition>
        <argsstring>(const Triple &amp;actual, const std::string &amp;expected, const std::string &amp;format=&quot;turtle&quot;)</argsstring>
        <name>equals</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;turtle&quot;</defval>
        </param>
        <briefdescription>
<para>test for equality between </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>actual</parametername>
</parameternamelist>
<parameterdescription>
<para>and</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="351" column="21" bodyfile="src/omexmeta/RDF.cpp" bodystart="468" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a8101930655e94114599d48f4a973d51f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::RDF::equals</definition>
        <argsstring>(const Triples &amp;actual, const std::string &amp;expected, const std::string &amp;format=&quot;turtle&quot;)</argsstring>
        <name>equals</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;turtle&quot;</defval>
        </param>
        <briefdescription>
<para>test for equality between </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>actual</parametername>
</parameternamelist>
<parameterdescription>
<para>and</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="356" column="21" bodyfile="src/omexmeta/RDF.cpp" bodystart="484" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1a686595f16edca5d2fa834056ba43bc09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::RDF::equals</definition>
        <argsstring>(RDF *actual, RDF *expected, const std::string &amp;format=&quot;turtle&quot;)</argsstring>
        <name>equals</name>
        <param>
          <type><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> *</type>
          <declname>actual</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> *</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;turtle&quot;</defval>
        </param>
        <briefdescription>
<para>test for equality between </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>actual</parametername>
</parameternamelist>
<parameterdescription>
<para>and</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="361" column="21" bodyfile="src/omexmeta/RDF.cpp" bodystart="444" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1RDF_1aa26e7c1636fc5d0fc45691db6a97c1ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::RDF::equals</definition>
        <argsstring>(const std::string &amp;first, const std::string &amp;second, const std::string &amp;first_format=&quot;turtle&quot;, const std::string &amp;second_format=&quot;turtle&quot;)</argsstring>
        <name>equals</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>second</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>first_format</declname>
          <defval>&quot;turtle&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>second_format</declname>
          <defval>&quot;turtle&quot;</defval>
        </param>
        <briefdescription>
<para>test for equality between </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>and</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>second</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/RDF.h" line="366" column="21" bodyfile="src/omexmeta/RDF.cpp" bodystart="500" bodyend="512"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/omexmeta/include/omexmeta/RDF.h" line="39" column="5" bodyfile="src/omexmeta/include/omexmeta/RDF.h" bodystart="39" bodyend="368"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1RDF_1ac88eeb1a0f6911a2c1e4c43cef1b9047" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>addFromFile</name></member>
      <member refid="classomexmeta_1_1RDF_1a9a29912bc44d47d371a2357b75194fc3" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>addFromString</name></member>
      <member refid="classomexmeta_1_1RDF_1af99201be3782319d32e963ca7bed5b2b" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>addFromUri</name></member>
      <member refid="classomexmeta_1_1RDF_1a9ecf58f64ea449a01457bfc28bb53e17" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>addTriple</name></member>
      <member refid="classomexmeta_1_1RDF_1a7a6ad7d96f3104da8356f02ac6705941" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>addTriples</name></member>
      <member refid="classomexmeta_1_1RDF_1a91574f34be1fe3054f4f7ce6830098b4" prot="private" virt="non-virtual"><scope>omexmeta::RDF</scope><name>classifyXmlType</name></member>
      <member refid="classomexmeta_1_1RDF_1a71b3dd4837a918a273f8d15aaa5c6c7b" prot="private" virt="non-virtual"><scope>omexmeta::RDF</scope><name>classifyXmlTypeFromFile</name></member>
      <member refid="classomexmeta_1_1RDF_1a711f228bb86c5cbf9740f64b8633d04c" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>commitTransaction</name></member>
      <member refid="classomexmeta_1_1RDF_1ab6525e8db606ffd48425b05ad2a204d8" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>empty</name></member>
      <member refid="classomexmeta_1_1RDF_1aecf658fb2442857994104693b3ad0e32" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>equals</name></member>
      <member refid="classomexmeta_1_1RDF_1acfa31de8762c1ddbf53eda0c3e1af30a" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>equals</name></member>
      <member refid="classomexmeta_1_1RDF_1a8101930655e94114599d48f4a973d51f" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>equals</name></member>
      <member refid="classomexmeta_1_1RDF_1a686595f16edca5d2fa834056ba43bc09" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>equals</name></member>
      <member refid="classomexmeta_1_1RDF_1aa26e7c1636fc5d0fc45691db6a97c1ac" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>equals</name></member>
      <member refid="classomexmeta_1_1RDF_1ade6ca329272d5de27496183a81bbec8a" prot="private" virt="non-virtual"><scope>omexmeta::RDF</scope><name>extractSemanticInformationFromSBML</name></member>
      <member refid="classomexmeta_1_1RDF_1add8f3d957f24a26785f29b85d50f4399" prot="private" virt="non-virtual"><scope>omexmeta::RDF</scope><name>freeRDF</name></member>
      <member refid="classomexmeta_1_1RDF_1a98a1da84161a7935bf38ec5e5d34e91f" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>fromFile</name></member>
      <member refid="classomexmeta_1_1RDF_1a9d91b3134cdcc6dfef6d62b7b09d8da2" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>fromString</name></member>
      <member refid="classomexmeta_1_1RDF_1ab2dadc7ff1cf25edbb401b2c879a21b0" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>fromString</name></member>
      <member refid="classomexmeta_1_1RDF_1a03906aa5c3b9429a2afdbe0ad2be21e6" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>fromUri</name></member>
      <member refid="classomexmeta_1_1RDF_1a1b3bd1292e77c1d87720f854ec5a04bd" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>getArchiveUri</name></member>
      <member refid="classomexmeta_1_1RDF_1a58b64a5972f74564994028504d8d227c" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1RDF_1a8007b0ce5729c7dd3f8cab86d42216f5" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>getModel</name></member>
      <member refid="classomexmeta_1_1RDF_1ac579ac8b79eb7d374a9077114837d2ef" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>getModelUri</name></member>
      <member refid="classomexmeta_1_1RDF_1a60b4a0a8c0c4f30a9cc71f9899bffabc" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>getRepositoryUri</name></member>
      <member refid="classomexmeta_1_1RDF_1a71b0e5f3b85a87c2231e7700d86060c3" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>getStorage</name></member>
      <member refid="classomexmeta_1_1RDF_1ad30bbe5c9b274713f87d4d4a5f2b28e9" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>getTransactionHandle</name></member>
      <member refid="classomexmeta_1_1RDF_1af5c7c6104496c09762518d56e94e6048" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>getTransactionRollback</name></member>
      <member refid="classomexmeta_1_1RDF_1a6979e6ca2688cf5cae1e9e1cf3a7309a" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>getXmlType</name></member>
      <member refid="classomexmeta_1_1RDF_1ae01ed260e02eda2141ffe1288f78c177" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>listOptions</name></member>
      <member refid="classomexmeta_1_1RDF_1a88a09d66eb9d6881fd77e9ef6133b4e6" prot="private" virt="non-virtual"><scope>omexmeta::RDF</scope><name>model_</name></member>
      <member refid="classomexmeta_1_1RDF_1ad31e5bb632eeaa00a3ac0e69c5e4f89c" prot="private" virt="non-virtual"><scope>omexmeta::RDF</scope><name>NamespaceMap</name></member>
      <member refid="classomexmeta_1_1RDF_1a1979d7d70a4c20f2e63f00c7fa668b1f" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>namespaces_</name></member>
      <member refid="classomexmeta_1_1RDF_1a59014bbb45a43dbfa760480f1713c473" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>OMEXlib_</name></member>
      <member refid="classomexmeta_1_1RDF_1ac652b39964477c8ea69e5218f2203013" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1RDF_1a9d1b20d798969d3c1dac412c621247b9" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1RDF_1ae3739bda3be0986547c31559381f3df4" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1RDF_1add69d33d544dc31789b2ff0a71182a84" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1RDF_1af5f598560ab2a4ebe661f9bdb8665755" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>propagateNamespacesFromParser</name></member>
      <member refid="classomexmeta_1_1RDF_1ab168be2c14d53c3fc94024121dc88ba6" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>query</name></member>
      <member refid="classomexmeta_1_1RDF_1aecb90e51830082f78ff055c045f4b439" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>RDF</name></member>
      <member refid="classomexmeta_1_1RDF_1ad95c4a8588988efe399c7f984e304990" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>RDF</name></member>
      <member refid="classomexmeta_1_1RDF_1a6490b2ea0d10e3026bea587a305b7fb9" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>RDF</name></member>
      <member refid="classomexmeta_1_1RDF_1a82bc53feb93e1243970400fd104174da" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>seen_namespaces_</name></member>
      <member refid="classomexmeta_1_1RDF_1a1670aa8c6379324aa414d0c56cfa7e4a" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>setArchiveUri</name></member>
      <member refid="classomexmeta_1_1RDF_1ad5310903d0e1a7a7ee890478f18b6181" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>setModelUri</name></member>
      <member refid="classomexmeta_1_1RDF_1ab1542acaf8d67ce96ace2825600ac600" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>setRepositoryUri</name></member>
      <member refid="classomexmeta_1_1RDF_1a8fc7b226619580fac47afce0a7ec2628" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>setXmlType</name></member>
      <member refid="classomexmeta_1_1RDF_1a63247bb3a05957abf7320c060543c3ca" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>size</name></member>
      <member refid="classomexmeta_1_1RDF_1afa2b148ecb235b3ac9497fa3b528d2ed" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>startTransaction</name></member>
      <member refid="classomexmeta_1_1RDF_1a278b78d5b1b88397c2eb4143f23dab8b" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>startTransactionWithHandle</name></member>
      <member refid="classomexmeta_1_1RDF_1a345bcba83c6928f750ba732b6e6c748b" prot="private" virt="non-virtual"><scope>omexmeta::RDF</scope><name>storage_</name></member>
      <member refid="classomexmeta_1_1RDF_1ac09044c8a4c1af4f9536dbf29b4c3f3c" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>toEditor</name></member>
      <member refid="classomexmeta_1_1RDF_1a80c6ad0b9c9daddd5e2150ababcc7476" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>toEditorPtr</name></member>
      <member refid="classomexmeta_1_1RDF_1a42a7be2a6261f03dc275b24a152dcaae" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>toFile</name></member>
      <member refid="classomexmeta_1_1RDF_1a53bc4c91a3c39eef9b27886873badca2" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>toString</name></member>
      <member refid="classomexmeta_1_1RDF_1a54d08d61cfd6eab43c2034e115150a59" prot="private" virt="non-virtual"><scope>omexmeta::RDF</scope><name>uriHandler_</name></member>
      <member refid="classomexmeta_1_1RDF_1ac7eaa8a5c0fdf7b563ba56550fede82a" prot="private" virt="non-virtual"><scope>omexmeta::RDF</scope><name>xmlType</name></member>
      <member refid="classomexmeta_1_1RDF_1a87b1eb7fe49f4928e61c399edf49e09c" prot="public" virt="non-virtual"><scope>omexmeta::RDF</scope><name>~RDF</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
