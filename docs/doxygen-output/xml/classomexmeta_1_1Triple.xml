<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1Triple" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::Triple</compoundname>
    <basecompoundref refid="classredland_1_1LibrdfStatement" prot="public" virt="non-virtual">redland::LibrdfStatement</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1Triple_1a36b093100ddf2b716b2d67336e1dffe4" prot="private" static="no" mutable="no">
        <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
        <definition>UriHandler&amp; omexmeta::Triple::uriHandler_</definition>
        <argsstring></argsstring>
        <name>uriHandler_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="130" column="20" bodyfile="src/omexmeta/include/omexmeta/Triple.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a9bbe27351665a72507570bd1da6b209c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::~Triple</definition>
        <argsstring>() override=default</argsstring>
        <name>~Triple</name>
        <briefdescription>
<para>only a default virtual destructor needed as call to base class destructor will clean up the underlying statement_ pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="44" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1aa28089d2e08463961811f98d70b1df8a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(UriHandler &amp;uriHandler)</argsstring>
        <name>Triple</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="46" column="18" bodyfile="src/omexmeta/Triple.cpp" bodystart="12" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ad160e8e90a25538cd5e3a8d46fae5cee" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(Triple &amp;&amp;triple) noexcept</argsstring>
        <name>Triple</name>
        <param>
          <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;&amp;</type>
          <declname>triple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="48" column="9" bodyfile="src/omexmeta/Triple.cpp" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a0831a005f3b781b73f7af661c3a903f8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::operator=</definition>
        <argsstring>(Triple &amp;&amp;triple) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;&amp;</type>
          <declname>triple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="50" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a79d8092e4fab78add6161890b2f3c624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(const Triple &amp;triple)</argsstring>
        <name>Triple</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
          <declname>triple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="52" column="9" bodyfile="src/omexmeta/Triple.cpp" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a977b07d30a7d4895b6f6a4f75221df0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::operator=</definition>
        <argsstring>(const Triple &amp;triple)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
          <declname>triple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="54" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="31" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a95491182a1fba9c86fd59a1dcfe573a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(UriHandler &amp;uriHandler, const LibrdfNode &amp;subject, const PredicatePtr &amp;predicate_ptr, const LibrdfNode &amp;resource)</argsstring>
        <name>Triple</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>subject</declname>
        </param>
        <param>
          <type>const PredicatePtr &amp;</type>
          <declname>predicate_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="56" column="9" bodyfile="src/omexmeta/Triple.cpp" bodystart="39" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ace642731214400b1c6d4ecff3b154598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(UriHandler &amp;uriHandler, const LibrdfNode &amp;subject, const LibrdfNode &amp;predicate, const LibrdfNode &amp;resource)</argsstring>
        <name>Triple</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>subject</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>const <ref refid="classredland_1_1LibrdfNode" kindref="compound">LibrdfNode</ref> &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="58" column="9" bodyfile="src/omexmeta/Triple.cpp" bodystart="42" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1aeb37b8aae97d7339d03c5f00aaa5e656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(UriHandler &amp;uriHandler, librdf_node *subject, librdf_node *predicate, librdf_node *resource)</argsstring>
        <name>Triple</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="structraptor__term" kindref="compound">librdf_node</ref> *</type>
          <declname>subject</declname>
        </param>
        <param>
          <type><ref refid="structraptor__term" kindref="compound">librdf_node</ref> *</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type><ref refid="structraptor__term" kindref="compound">librdf_node</ref> *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="61" column="9" bodyfile="src/omexmeta/Triple.cpp" bodystart="45" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a1cb45dd3a5778f0e0e92e4a185da9400" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Triple::getLocalUri</definition>
        <argsstring>() const</argsstring>
        <name>getLocalUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="63" column="27" bodyfile="src/omexmeta/Triple.cpp" bodystart="270" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1afd918ecccfa23079d9cb70f2e1a3e9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triple::setModelUri</definition>
        <argsstring>(const std::string &amp;model_uri)</argsstring>
        <name>setModelUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>model_uri</declname>
        </param>
        <briefdescription>
<para>set the model_uri_ attribute for this triple </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="68" column="14" bodyfile="src/omexmeta/Triple.cpp" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a2cabbc7a28348a9472bd50f059469183" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::Triple::str</definition>
        <argsstring>(const std::string &amp;format=&quot;turtle&quot;, const std::string &amp;base=(std::filesystem::current_path()/=&quot;annotations.rdf&quot;).string(), std::string omex_name=&quot;NewOmex.omex/&quot;, std::string model_name=&quot;NewModel.xml&quot;) const</argsstring>
        <name>str</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;turtle&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>base</declname>
          <defval>(std::filesystem::current_path()/=&quot;annotations.rdf&quot;).string()</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>omex_name</declname>
          <defval>&quot;NewOmex.omex/&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>model_name</declname>
          <defval>&quot;NewModel.xml&quot;</defval>
        </param>
        <briefdescription>
<para>serialize the triple using a @format serializer. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates an isolated serializer that does not get added to the users annotations. <ref refid="classThis" kindref="compound">This</ref> method is for visualizing a triple only. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="77" column="22" bodyfile="src/omexmeta/Triple.cpp" bodystart="51" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a3f3868622349d3a3e14ed3e4b21d49a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triple::freeTriple</definition>
        <argsstring>()</argsstring>
        <name>freeTriple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="82" column="14" bodyfile="src/omexmeta/Triple.cpp" bodystart="266" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ac1110c3092b148b4da2264186b613a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::about</definition>
        <argsstring>(std::string omex_name, const std::string &amp;model_name, std::string metaid)</argsstring>
        <name>about</name>
        <param>
          <type>std::string</type>
          <declname>omex_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>model_name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="84" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="118" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a0c8371a282b8f2a59ebaa87abf7a8758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::about</definition>
        <argsstring>(std::string metaid)</argsstring>
        <name>about</name>
        <param>
          <type>std::string</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="86" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="142" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a0a8d8795d7015d13d888ed77cbfb4220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::about</definition>
        <argsstring>(std::string metaid, eUriType uri_type)</argsstring>
        <name>about</name>
        <param>
          <type>std::string</type>
          <declname>metaid</declname>
        </param>
        <param>
          <type>eUriType</type>
          <declname>uri_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="88" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="168" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a69df88d19e2f9077fccfa9543dadd15f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::Triple::getAbout</definition>
        <argsstring>() const</argsstring>
        <name>getAbout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="90" column="21" bodyfile="src/omexmeta/Triple.cpp" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a886240fe50becaaa47ca171f2d454ba4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structraptor__statement" kindref="compound">librdf_statement</ref> *</type>
        <definition>librdf_statement * omexmeta::Triple::getStatement</definition>
        <argsstring>() const</argsstring>
        <name>getStatement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="92" column="26" bodyfile="src/omexmeta/Triple.cpp" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a57b4521321178af38415e76cd483207e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setPredicate</definition>
        <argsstring>(const std::string &amp;namespace_, const std::string &amp;term)</argsstring>
        <name>setPredicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>namespace_</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="94" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="174" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a27637af321ba7d7eeb2596bac93feb54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::predicate</definition>
        <argsstring>(const std::string &amp;namespace_, const std::string &amp;term)</argsstring>
        <name>predicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>namespace_</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
<para>alias for setPredicate </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="99" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a7358812badc8d0d5589a0165af4ad375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceLiteral</definition>
        <argsstring>(const std::string &amp;literal)</argsstring>
        <name>setResourceLiteral</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>literal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="101" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="206" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ae6836c6e9d06a310a120345aa95a4daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceUri</definition>
        <argsstring>(const std::string &amp;identifiers_uri)</argsstring>
        <name>setResourceUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifiers_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="103" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="215" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a90ffe9b74d354cc3fe3132a07546f6d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceBlank</definition>
        <argsstring>(const std::string &amp;blank_id)</argsstring>
        <name>setResourceBlank</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>blank_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="105" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="223" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a34832780748d58b0fddea6f6f079217a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::Triple::isEmpty</definition>
        <argsstring>()</argsstring>
        <name>isEmpty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="107" column="14" bodyfile="src/omexmeta/Triple.cpp" bodystart="258" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a1a99a566a9d1883c6329a023f4dbc056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setPredicate</definition>
        <argsstring>(const std::string &amp;uri)</argsstring>
        <name>setPredicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="109" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="191" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a2cb9ba4a57bd6f85c7a9b49b93245fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::predicate</definition>
        <argsstring>(const std::string &amp;uri)</argsstring>
        <name>predicate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="111" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ab89993902b551b98d9e17e4fe5ebed6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::Triple::freeTripleAndUris</definition>
        <argsstring>()</argsstring>
        <name>freeTripleAndUris</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="113" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ac379e5410a41c1946e91d581f023c7f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; omexmeta::Triple::getModelUri</definition>
        <argsstring>() const</argsstring>
        <name>getModelUri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="115" column="27" bodyfile="src/omexmeta/Triple.cpp" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a44d31389b0056ab4f1d8689521a25032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::setResourceWithModelUri</definition>
        <argsstring>(const std::string &amp;metaid)</argsstring>
        <name>setResourceWithModelUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="117" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="242" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a1659736747ab322116f5b75069efc398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::resourceWithModelUri</definition>
        <argsstring>(const std::string &amp;metaid)</argsstring>
        <name>resourceWithModelUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>metaid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="119" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a60b0bd14eb91bab42ea894ec50843eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::resourceLiteral</definition>
        <argsstring>(const std::string &amp;literal)</argsstring>
        <name>resourceLiteral</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>literal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="121" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a27f52f5d96e0fcbd17291bb88f39617f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::resourceUri</definition>
        <argsstring>(const std::string &amp;identifiers_uri)</argsstring>
        <name>resourceUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifiers_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="123" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1Triple_1ac19ea0eaa8bfe1a7c481da4312cdf1b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> &amp;</type>
        <definition>Triple &amp; omexmeta::Triple::resourceBlank</definition>
        <argsstring>(const std::string &amp;blank_id)</argsstring>
        <name>resourceBlank</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>blank_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="125" column="16" bodyfile="src/omexmeta/Triple.cpp" bodystart="238" bodyend="240"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classomexmeta_1_1Triple_1a8bc0e104ab8f1e18a4ff8b9cae503395" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::Triple::Triple</definition>
        <argsstring>(UriHandler &amp;uriHandler, librdf_statement *statement)</argsstring>
        <name>Triple</name>
        <param>
          <type><ref refid="classomexmeta_1_1UriHandler" kindref="compound">UriHandler</ref> &amp;</type>
          <declname>uriHandler</declname>
        </param>
        <param>
          <type><ref refid="structraptor__statement" kindref="compound">librdf_statement</ref> *</type>
          <declname>statement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/include/omexmeta/Triple.h" line="128" column="9" bodyfile="src/omexmeta/Triple.cpp" bodystart="48" bodyend="49"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>redland::LibrdfStatement</label>
        <link refid="classredland_1_1LibrdfStatement"/>
      </node>
      <node id="1">
        <label>omexmeta::Triple</label>
        <link refid="classomexmeta_1_1Triple"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>redland::LibrdfStatement</label>
        <link refid="classredland_1_1LibrdfStatement"/>
        <childnode refid="3" relation="usage">
          <edgelabel>statement_</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>raptor_term_literal_value</label>
        <link refid="structraptor__term__literal__value"/>
      </node>
      <node id="3">
        <label>raptor_statement</label>
        <link refid="structraptor__statement"/>
        <childnode refid="4" relation="usage">
          <edgelabel>graph</edgelabel>
          <edgelabel>object</edgelabel>
          <edgelabel>predicate</edgelabel>
          <edgelabel>subject</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>raptor_term_blank_value</label>
        <link refid="structraptor__term__blank__value"/>
      </node>
      <node id="1">
        <label>omexmeta::Triple</label>
        <link refid="classomexmeta_1_1Triple"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>raptor_term</label>
        <link refid="structraptor__term"/>
        <childnode refid="5" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>raptor_term_value</label>
        <link refid="unionraptor__term__value"/>
        <childnode refid="6" relation="usage">
          <edgelabel>literal</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>blank</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/omexmeta/include/omexmeta/Triple.h" line="33" column="5" bodyfile="src/omexmeta/include/omexmeta/Triple.h" bodystart="33" bodyend="131"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1Triple_1ac1110c3092b148b4da2264186b613a93" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>about</name></member>
      <member refid="classomexmeta_1_1Triple_1a0c8371a282b8f2a59ebaa87abf7a8758" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>about</name></member>
      <member refid="classomexmeta_1_1Triple_1a0a8d8795d7015d13d888ed77cbfb4220" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>about</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a700219b2fed175a96fecfbd905d20ab1" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>checkForNull</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a2013f7fa1ce77c0659d504c2f54d6e45" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>equals</name></member>
      <member refid="classredland_1_1LibrdfStatement_1aa51bc647bc938a07bd6c16b4d6ce07b4" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>freeStatement</name></member>
      <member refid="classomexmeta_1_1Triple_1a3f3868622349d3a3e14ed3e4b21d49a9" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>freeTriple</name></member>
      <member refid="classomexmeta_1_1Triple_1ab89993902b551b98d9e17e4fe5ebed6b" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>freeTripleAndUris</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a4eceaebc10deea27f4c75f7c8b4cccaf" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>fromRawNodePtrs</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a9fb66c801d731ffce13e4d1381c49c29" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>fromRawStatementPtr</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a6b655a56f37dbe95fec840a0a1f0ed53" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>get</name></member>
      <member refid="classomexmeta_1_1Triple_1a69df88d19e2f9077fccfa9543dadd15f" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getAbout</name></member>
      <member refid="classomexmeta_1_1Triple_1a1cb45dd3a5778f0e0e92e4a185da9400" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1Triple_1ac379e5410a41c1946e91d581f023c7f5" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getModelUri</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a87edefc7382feb47585d4a3a91f26a76" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getPredicateNode</name></member>
      <member refid="classredland_1_1LibrdfStatement_1af52b7e72cb067548d97f48b4a77a44ff" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getPredicateNamespaceStr</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ade668892ca9383eacbf5517df4e8f8d8" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getPredicateNode</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a37e4c22fa0b2cc3fbf0c659fa1546d92" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getResourceNode</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a9d4376221d84e22d15eeb6393ea4afe3" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getResourceNode</name></member>
      <member refid="classomexmeta_1_1Triple_1a886240fe50becaaa47ca171f2d454ba4" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ae72ad665ee0546f9b412ef2798c719b6" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getSubjectNode</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a2d7cc313572ac34e9822e97d6b23dd36" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getSubjectNode</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ae86b7dd596bd71e23fb7284354273791" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getUsage</name></member>
      <member refid="classredland_1_1LibrdfStatement_1aae6c894388cf0e0af0cb427e03224d38" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>getWithoutIncrement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a90c9f8f0c9c560d168dadfd26ac7febb" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>incrementUsage</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a84a6fae7f1879c2f033001a9927627b0" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>isComplete</name></member>
      <member refid="classomexmeta_1_1Triple_1a34832780748d58b0fddea6f6f079217a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>isEmpty</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ac1b38e67ff0b90ac54b27c4f5f5d9e12" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a3cc134733626929faabbbdd376b348c1" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1aea171565ffb3ecc8d9c1db5439314306" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1afc571bdf0e13d00ff7aa684aecc2987a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ae7f7e27b7a502070195103268407243a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a4cbbbf99d094cea4569324a8c67789fb" prot="protected" virt="non-virtual"><scope>omexmeta::Triple</scope><name>LibrdfStatement</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ad3d6c126b90c0d93413a08353c496f8f" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1Triple_1a0831a005f3b781b73f7af661c3a903f8" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1Triple_1a977b07d30a7d4895b6f6a4f75221df0c" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a12bfe14c6ca6abf09ee29b3ee6fe3ab7" prot="public" virt="non-virtual" ambiguityscope="redland::LibrdfStatement::"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a6cebbcea1400ba2983b25096f3db3b3c" prot="public" virt="non-virtual" ambiguityscope="redland::LibrdfStatement::"><scope>omexmeta::Triple</scope><name>operator=</name></member>
      <member refid="classredland_1_1LibrdfStatement_1ada81e9bfb312e25daf20d6dda10eeb2e" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1Triple_1a27637af321ba7d7eeb2596bac93feb54" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>predicate</name></member>
      <member refid="classomexmeta_1_1Triple_1a2cb9ba4a57bd6f85c7a9b49b93245fea" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>predicate</name></member>
      <member refid="classredland_1_1LibrdfStatement_1afd63d6425b2130dbe4e76fdee4d7218b" prot="protected" virt="non-virtual"><scope>omexmeta::Triple</scope><name>refreshStatement</name></member>
      <member refid="classomexmeta_1_1Triple_1ac19ea0eaa8bfe1a7c481da4312cdf1b9" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>resourceBlank</name></member>
      <member refid="classomexmeta_1_1Triple_1a60b0bd14eb91bab42ea894ec50843eb3" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>resourceLiteral</name></member>
      <member refid="classomexmeta_1_1Triple_1a27f52f5d96e0fcbd17291bb88f39617f" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>resourceUri</name></member>
      <member refid="classomexmeta_1_1Triple_1a1659736747ab322116f5b75069efc398" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>resourceWithModelUri</name></member>
      <member refid="classomexmeta_1_1Triple_1afd918ecccfa23079d9cb70f2e1a3e9b0" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setModelUri</name></member>
      <member refid="classomexmeta_1_1Triple_1a57b4521321178af38415e76cd483207e" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setPredicate</name></member>
      <member refid="classomexmeta_1_1Triple_1a1a99a566a9d1883c6329a023f4dbc056" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setPredicate</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a3306876fb080f3d19fca806142f93f87" prot="public" virt="non-virtual" ambiguityscope="redland::LibrdfStatement::"><scope>omexmeta::Triple</scope><name>setPredicate</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a8b8fd2999e80bd2912af2430503a557a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResource</name></member>
      <member refid="classomexmeta_1_1Triple_1a90ffe9b74d354cc3fe3132a07546f6d1" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceBlank</name></member>
      <member refid="classomexmeta_1_1Triple_1a7358812badc8d0d5589a0165af4ad375" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceLiteral</name></member>
      <member refid="classomexmeta_1_1Triple_1ae6836c6e9d06a310a120345aa95a4daa" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceUri</name></member>
      <member refid="classomexmeta_1_1Triple_1a44d31389b0056ab4f1d8689521a25032" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setResourceWithModelUri</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a5fa27f77859a4673e991b9e86f84d889" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>setSubject</name></member>
      <member refid="classredland_1_1LibrdfStatement_1acd1e53cd114c6744cf808174a9333ce5" prot="protected" virt="non-virtual"><scope>omexmeta::Triple</scope><name>statement_</name></member>
      <member refid="classomexmeta_1_1Triple_1a2cabbc7a28348a9472bd50f059469183" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>str</name></member>
      <member refid="classomexmeta_1_1Triple_1aa28089d2e08463961811f98d70b1df8a" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1ad160e8e90a25538cd5e3a8d46fae5cee" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1a79d8092e4fab78add6161890b2f3c624" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1a95491182a1fba9c86fd59a1dcfe573a6" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1ace642731214400b1c6d4ecff3b154598" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1aeb37b8aae97d7339d03c5f00aaa5e656" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1a8bc0e104ab8f1e18a4ff8b9cae503395" prot="private" virt="non-virtual"><scope>omexmeta::Triple</scope><name>Triple</name></member>
      <member refid="classomexmeta_1_1Triple_1a36b093100ddf2b716b2d67336e1dffe4" prot="private" virt="non-virtual"><scope>omexmeta::Triple</scope><name>uriHandler_</name></member>
      <member refid="classredland_1_1LibrdfStatement_1a002503079c7e1bde3dfd3eab592361c2" prot="public" virt="virtual"><scope>omexmeta::Triple</scope><name>~LibrdfStatement</name></member>
      <member refid="classomexmeta_1_1Triple_1a9bbe27351665a72507570bd1da6b209c" prot="public" virt="non-virtual"><scope>omexmeta::Triple</scope><name>~Triple</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
