<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classomexmeta_1_1PhysicalForce" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::PhysicalForce</compoundname>
    <basecompoundref refid="classomexmeta_1_1PhysicalPhenomenon" prot="public" virt="non-virtual">omexmeta::PhysicalPhenomenon</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalForce_1a79c5d2ad46b427dea58ab7058c8cd78b" prot="private" static="no" mutable="no">
        <type>Sources</type>
        <definition>Sources omexmeta::PhysicalForce::sources_</definition>
        <argsstring></argsstring>
        <name>sources_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="28" column="1" bodyfile="src/omexmeta/PhysicalForce.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalForce_1a42c0ae3fe54ba4b69a709feefb01cee3" prot="private" static="no" mutable="no">
        <type>Sinks</type>
        <definition>Sinks omexmeta::PhysicalForce::sinks_</definition>
        <argsstring></argsstring>
        <name>sinks_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="29" column="1" bodyfile="src/omexmeta/PhysicalForce.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1ad5b43ea5489891c45f5ebc4c9b62e44e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalForce::PhysicalForce</definition>
        <argsstring>()=delete</argsstring>
        <name>PhysicalForce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1ad549162ec04a7aeb5b2c35f996f044a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalForce::~PhysicalForce</definition>
        <argsstring>()=default</argsstring>
        <name>~PhysicalForce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1a38356903b574ed99cf40df75013d28e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalForce::PhysicalForce</definition>
        <argsstring>(librdf_model *model, std::string local_uri, PhysicalProperty physicalProperty, Sources sources, Sinks sinks)</argsstring>
        <name>PhysicalForce</name>
        <param>
          <type>librdf_model *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>local_uri</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref></type>
          <declname>physicalProperty</declname>
        </param>
        <param>
          <type>Sources</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>Sinks</type>
          <declname>sinks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="46" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="14" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1a41cd6c9904f3287bb8cbbab2b9d2ada3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::PhysicalForce::free</definition>
        <argsstring>()</argsstring>
        <name>free</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="61" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="123" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1a673e6810fe969bcd087ab88c62e5e041" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalForce::PhysicalForce</definition>
        <argsstring>(librdf_model *model)</argsstring>
        <name>PhysicalForce</name>
        <param>
          <type>librdf_model *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="72" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="109" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1a4712593524d8acbb7625d6d83e52a527" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalForce::PhysicalForce</definition>
        <argsstring>(librdf_model *model, const std::string &amp;local_uri)</argsstring>
        <name>PhysicalForce</name>
        <param>
          <type>librdf_model *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>local_uri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="84" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="112" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1acbab8e6be67a9b40795e53045b7de4aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalForce::createMetaId</definition>
        <argsstring>() const</argsstring>
        <name>createMetaId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="90" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1aa42b8e04573d2ae88f952c76b146d5ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Sources &amp;</type>
        <definition>const std::vector&lt; SourceParticipant &gt; &amp; omexmeta::PhysicalForce::getSources</definition>
        <argsstring>() const</argsstring>
        <name>getSources</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="96" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1ab37bbe3a0f762066fdb43e5c2ce608eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Sinks &amp;</type>
        <definition>const std::vector&lt; SinkParticipant &gt; &amp; omexmeta::PhysicalForce::getSinks</definition>
        <argsstring>() const</argsstring>
        <name>getSinks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="102" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1a39dd511aee85130d07cb6ffb3f8e87f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref></type>
        <definition>Triples omexmeta::PhysicalForce::toTriples</definition>
        <argsstring>() override</argsstring>
        <name>toTriples</name>
        <reimplements refid="classomexmeta_1_1PhysicalPhenomenon_1a30617e685bd8b155a76d38ab5a9db273">toTriples</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="111" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="34" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1a081aecc43d16b2fc8826c4050eb2055d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalForce" kindref="compound">PhysicalForce</ref> &amp;</type>
        <definition>PhysicalForce &amp; omexmeta::PhysicalForce::setPhysicalProperty</definition>
        <argsstring>(PhysicalProperty physicalProperty)</argsstring>
        <name>setPhysicalProperty</name>
        <param>
          <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref></type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="136" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1a3f979432322d40efc8a15cf5ee883100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalForce" kindref="compound">PhysicalForce</ref> &amp;</type>
        <definition>PhysicalForce &amp; omexmeta::PhysicalForce::setPhysicalProperty</definition>
        <argsstring>(std::string subject_metaid, std::string physical_property)</argsstring>
        <name>setPhysicalProperty</name>
        <param>
          <type>std::string</type>
          <declname>subject_metaid</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>physical_property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="144" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1adfb620f6e28476dce6aa5b0d7d5b9546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalForce" kindref="compound">PhysicalForce</ref> &amp;</type>
        <definition>PhysicalForce &amp; omexmeta::PhysicalForce::addSource</definition>
        <argsstring>(double multiplier, const std::string &amp;physical_entity_reference)</argsstring>
        <name>addSource</name>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>physical_entity_reference</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="156" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1a7dca33926e787589d5a58de50fc1be1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalForce" kindref="compound">PhysicalForce</ref> &amp;</type>
        <definition>PhysicalForce &amp; omexmeta::PhysicalForce::addSink</definition>
        <argsstring>(double multiplier, const std::string &amp;physical_entity_reference)</argsstring>
        <name>addSink</name>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>physical_entity_reference</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="168" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="101" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1a9910c8edac57daf70faa1f1e2e0208d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::PhysicalForce::getNumSources</definition>
        <argsstring>()</argsstring>
        <name>getNumSources</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="179" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1a1135c75705b59afa7037bab313009534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::PhysicalForce::getNumSinks</definition>
        <argsstring>()</argsstring>
        <name>getNumSinks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="186" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1affa0a1f3cdce0a3336d56658a92c65f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalForce::operator==</definition>
        <argsstring>(const PhysicalForce &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalForce" kindref="compound">PhysicalForce</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="188" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="133" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalForce_1aeb7adb235c0caac04c7aa599f98f258a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalForce::operator!=</definition>
        <argsstring>(const PhysicalForce &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalForce" kindref="compound">PhysicalForce</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalForce.h" line="190" column="1" bodyfile="src/omexmeta/PhysicalForce.cpp" bodystart="140" bodyend="142"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="130">
        <label>omexmeta::PhysicalPhenomenon</label>
        <link refid="classomexmeta_1_1PhysicalPhenomenon"/>
      </node>
      <node id="129">
        <label>omexmeta::PhysicalForce</label>
        <link refid="classomexmeta_1_1PhysicalForce"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="133">
        <label>omexmeta::PhysicalProperty</label>
        <link refid="classomexmeta_1_1PhysicalProperty"/>
      </node>
      <node id="132">
        <label>omexmeta::PhysicalPhenomenon</label>
        <link refid="classomexmeta_1_1PhysicalPhenomenon"/>
        <childnode refid="133" relation="usage">
          <edgelabel>physical_property_</edgelabel>
        </childnode>
      </node>
      <node id="131">
        <label>omexmeta::PhysicalForce</label>
        <link refid="classomexmeta_1_1PhysicalForce"/>
        <childnode refid="132" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/omexmeta/PhysicalForce.h" line="26" column="1" bodyfile="src/omexmeta/PhysicalForce.h" bodystart="26" bodyend="191"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1PhysicalForce_1a7dca33926e787589d5a58de50fc1be1d" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>addSink</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1adfb620f6e28476dce6aa5b0d7d5b9546" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>addSource</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1acbab8e6be67a9b40795e53045b7de4aa" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>createMetaId</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1a41cd6c9904f3287bb8cbbab2b9d2ada3" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>free</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aa77b6063825e8bc3b83516e923c5ad37" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>generateMetaId</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a8be912d1256d6b913c4965f96f1b730b" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>getAbout</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a2d59ebbc920a40348d102af31ed6661a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1a1135c75705b59afa7037bab313009534" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>getNumSinks</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1a9910c8edac57daf70faa1f1e2e0208d1" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>getNumSources</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1ac741cab1f6df58b0de484fc1771ef839" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>getPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a8d89c1a5b1d4cdf16ab9f423562322db" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>getPhysicalPropertyId</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1ab37bbe3a0f762066fdb43e5c2ce608eb" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>getSinks</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1aa42b8e04573d2ae88f952c76b146d5ac" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>getSources</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1ae99e667cbceff2da0c4c0f5c64a8ba8f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>getSubjectStr</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a9676a1dcc458247a19d19cda16d640f4" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>getType</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a114864dfae1f79ce4e3f430b7711516c" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>local_uri_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a9de43fc3fd94d3463c7fb9b8f684e78b" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>model_</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1aeb7adb235c0caac04c7aa599f98f258a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a2c726263714e31c7c19d6e73c2c593f8" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PhysicalPhenomenon::"><scope>omexmeta::PhysicalForce</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aac3920bfe9bf16e071ebdd8ed4fabe2f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1af15355b4c2a361b4b02dca02d3877aed" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1affa0a1f3cdce0a3336d56658a92c65f3" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a1c3322453b3c6831668ffa98d9f4b6af" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PhysicalPhenomenon::"><scope>omexmeta::PhysicalForce</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a9e17807d60d9e3f797d6c02ef85cdfc6" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>physical_property_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a41e8364977eea6d963a82f0f8088cb9a" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>physical_property_id_</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1ad5b43ea5489891c45f5ebc4c9b62e44e" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>PhysicalForce</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1a38356903b574ed99cf40df75013d28e7" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>PhysicalForce</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1a673e6810fe969bcd087ab88c62e5e041" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>PhysicalForce</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1a4712593524d8acbb7625d6d83e52a527" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>PhysicalForce</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1af5416111e5358d3582ff598ad51d62a9" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1ad823dad75504adb78975c810e5f1ff94" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aeb95aedf1756ded154ec6753108a691e" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aa140516da97b03960175f9bc04ecf865" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1afc6f1152ae34116dd402a6d8d36fb0b4" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1ad6499f3ca9878f5236afd41ed6839229" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a0a9c54b0c4bfad62b618766474dc70f8" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>setAbout</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a84cae9aa96ca00df45b0f81dd8d3ffd4" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>setLocalUri</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1a081aecc43d16b2fc8826c4050eb2055d" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1a3f979432322d40efc8a15cf5ee883100" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1afad41dbf096b22ab9b64441cb25e9db9" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PhysicalPhenomenon::"><scope>omexmeta::PhysicalForce</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a715b76003eba8e5808fe44a768199fab" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>setPhysicalPropertyId</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a4c27a0b0e430df95b3cffaf268973eec" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>setType</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1a42c0ae3fe54ba4b69a709feefb01cee3" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>sinks_</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1a79c5d2ad46b427dea58ab7058c8cd78b" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>sources_</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1a39dd511aee85130d07cb6ffb3f8e87f0" prot="public" virt="virtual"><scope>omexmeta::PhysicalForce</scope><name>toTriples</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a74e88adb2099099e411b55cb9aa460a0" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>type_</name></member>
      <member refid="classomexmeta_1_1PhysicalForce_1ad549162ec04a7aeb5b2c35f996f044a9" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>~PhysicalForce</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a215daebc00eed1cf7d9eddeaed0d1603" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalForce</scope><name>~PhysicalPhenomenon</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
