<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1PhysicalEntity" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::PhysicalEntity</compoundname>
    <basecompoundref refid="classomexmeta_1_1PhysicalPhenomenon" prot="public" virt="non-virtual">omexmeta::PhysicalPhenomenon</basecompoundref>
    <includes refid="PhysicalEntity_8h" local="no">PhysicalEntity.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalEntity_1ac5f674248ef40f86df4a5160c2d193e3" prot="private" static="no" mutable="no">
        <type><ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref></type>
        <definition>Resource omexmeta::PhysicalEntity::identity_resource_</definition>
        <argsstring></argsstring>
        <name>identity_resource_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="31" column="18" bodyfile="src/omexmeta/PhysicalEntity.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalEntity_1ac8f480836499a208e2cfbe71a1492e5b" prot="private" static="no" mutable="no">
        <type>Resources</type>
        <definition>Resources omexmeta::PhysicalEntity::location_resources_</definition>
        <argsstring></argsstring>
        <name>location_resources_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="32" column="19" bodyfile="src/omexmeta/PhysicalEntity.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalEntity_1aa69e751efbd57e4f4e9c79dc00f7bf59" prot="private" static="no" mutable="no">
        <type>Resources</type>
        <definition>Resources omexmeta::PhysicalEntity::part_resources_</definition>
        <argsstring></argsstring>
        <name>part_resources_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="33" column="19" bodyfile="src/omexmeta/PhysicalEntity.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalEntity_1a2567590f9b90e21e176ce6f447854faf" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalEntity::physical_entity_property_id_</definition>
        <argsstring></argsstring>
        <name>physical_entity_property_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="34" column="21" bodyfile="src/omexmeta/PhysicalEntity.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a9d29348a080c64f91ff6ec184fd45ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalEntity::PhysicalEntity</definition>
        <argsstring>()=delete</argsstring>
        <name>PhysicalEntity</name>
        <briefdescription>
<para>default constructor for <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>deliberately deleted. If you try using the builder interface (chaining setter methods) from a default instantiated <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> you will get an error, because there will be no model assicated with <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref>. Instead, always instantiate a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> from the <ref refid="classomexmeta_1_1Editor_1a0740831baafe244374ad7a324d51a87e" kindref="member">Editor::addPhysicalEntity()</ref> method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="46" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a0341918665af91cacdb4481d037c42d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalEntity::PhysicalEntity</definition>
        <argsstring>(librdf_model *model, std::string model_uri, std::string local_uri, PhysicalProperty physicalProperty, Resource is, Resources is_part_of)</argsstring>
        <name>PhysicalEntity</name>
        <param>
          <type>librdf_model *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>model_uri</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>local_uri</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref></type>
          <declname>physicalProperty</declname>
        </param>
        <param>
          <type><ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref></type>
          <declname>is</declname>
        </param>
        <param>
          <type>Resources</type>
          <declname>is_part_of</declname>
        </param>
        <briefdescription>
<para>constructor for instantiating a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> object </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>the model being used by the current rdf graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>about</parametername>
</parameternamelist>
<parameterdescription>
<para>The subject portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> representing the metaid for the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>physicalProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>A term from the ontology of physical for biology of type <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;what&quot; portion of a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_part_of</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;where&quot; portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Users should not need to use this constructor directly as it is embedded in the builder interface. The<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_part_of</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter is actually a std::vector of <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> objects. It can be as long as needed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="61" column="9" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="9" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1ab905eecead2704afb14285fa44899958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalEntity::~PhysicalEntity</definition>
        <argsstring>()=default</argsstring>
        <name>~PhysicalEntity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="64" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a6fd4acd7255a01322c4a53d3e84df0ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::PhysicalEntity::free</definition>
        <argsstring>()</argsstring>
        <name>free</name>
        <briefdescription>
<para>free resources uses by <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> objects are owned either by the caller or by a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object, depending on whether you have &quot;given&quot; the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> to a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object by calling &quot;str&quot; or &quot;toTriples&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="73" column="14" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="14" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a6bbbce71778e374de7d4e5e2e674fc2b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalEntity::PhysicalEntity</definition>
        <argsstring>(librdf_model *model)</argsstring>
        <name>PhysicalEntity</name>
        <param>
          <type>librdf_model *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>constructor for <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>the librdf_model object in use. Passed down from <ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref> class during instantiation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classThis" kindref="compound">This</ref> alternative constructor is used when users use the builder interface (which should actually be most of the time). The <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> is instantiated with only the model to allow for a better way of collecting necessary information from the user. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="85" column="18" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a5f583e60ad44bbb3dfcd11fdc6bc72cc" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalEntity::PhysicalEntity</definition>
        <argsstring>(librdf_model *model, const std::string &amp;model_uri, const std::string &amp;local_uri)</argsstring>
        <name>PhysicalEntity</name>
        <param>
          <type>librdf_model *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>model_uri</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>local_uri</declname>
        </param>
        <briefdescription>
<para>constructor for <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>the librdf_model object in use. Passed down from <ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref> class during instantiation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>the current localName argument. Passed down from <ref refid="classomexmeta_1_1Editor" kindref="compound">Editor</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="classThis" kindref="compound">This</ref> alternative constructor is used when users use the builder interface (which should actually be most of the time). The <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> is instantiated with only the model to allow for a better way of collecting necessary information from the user. The <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> also needs access to the model_uri, which we pass here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="100" column="18" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="30" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a51f5df8b2e8a1d65e5aa0d10e53b77ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref></type>
        <definition>Triples omexmeta::PhysicalEntity::toTriples</definition>
        <argsstring>() override</argsstring>
        <name>toTriples</name>
        <reimplements refid="classomexmeta_1_1PhysicalPhenomenon_1a30617e685bd8b155a76d38ab5a9db273">toTriples</reimplements>
        <briefdescription>
<para>convert <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> to a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object, which can then be passed to a model via the <ref refid="classomexmeta_1_1Editor_1a0740831baafe244374ad7a324d51a87e" kindref="member">Editor::addPhysicalEntity</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> objects containing the <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> objects associated with this <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref></para>
</simplesect>
When using &quot;toTriples&quot; you are giving ownership of the nodes used by <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> to the returned <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object, which automatically cleans up after itself in its destructor. If you instantiate a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> and do not call toTriples (which will not be often), then the caller is responsible for calling <ref refid="classomexmeta_1_1PhysicalEntity_1a6fd4acd7255a01322c4a53d3e84df0ba" kindref="member">PhysicalEntity::free</ref> when finished. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="115" column="18" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="80" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1ae4b3374e9ebb817eb63f9105b491e958" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> &amp;</type>
        <definition>const Resource &amp; omexmeta::PhysicalEntity::getIdentityResource</definition>
        <argsstring>() const</argsstring>
        <name>getIdentityResource</name>
        <briefdescription>
<para>return the IdentityResource in use. I.e. the &quot;what&quot; portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the identity <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="122" column="25" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a3e2fba07a4622db0180650d24bf263d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Resources &amp;</type>
        <definition>const Resources &amp; omexmeta::PhysicalEntity::getLocationResources</definition>
        <argsstring>() const</argsstring>
        <name>getLocationResources</name>
        <briefdescription>
<para>return a vector of resources representing the &quot;where&quot; part of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>vector of <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> objects representing anatomical location of physical entity </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="129" column="26" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a5d7168c527d2dbdacd612de37aa9a605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::setPhysicalProperty</definition>
        <argsstring>(std::string subject_metaid, const std::string &amp;physicalProperty)</argsstring>
        <name>setPhysicalProperty</name>
        <param>
          <type>std::string</type>
          <declname>subject_metaid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
<para>sets the physical property for a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physicalProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>a string representing the OPB term used by the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to this Physical entity. Allows chaining together builder commands.</para>
</simplesect>
The OBP argument requires a string of the form &quot;obp:opbxxx&quot; where &quot;xxx&quot; is the id for the OPB term. An instance of <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> is instantiated with<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physicalProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>as its value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="139" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a9bca0cb13601b6f9617df9f264968f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::setPhysicalProperty</definition>
        <argsstring>(PhysicalProperty physicalProperty)</argsstring>
        <name>setPhysicalProperty</name>
        <param>
          <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref></type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
<para>sets the physical property for a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> instance </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to this Physical entity. Allows chaining together builder commands.</para>
</simplesect>
Prefer the alternative setPhysicalProperty instance, since you do not need to instantiate the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> yourself.</para>
<para>For developers. Consider removing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="150" column="25" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a4d4c3ee9572b19e44e79a44f18f1ac31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::setIdentity</definition>
        <argsstring>(const std::string &amp;resource)</argsstring>
        <name>setIdentity</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>sets the identity portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> (the &quot;What&quot;). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resource</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource to be used for the identity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to this Physical entity. Allows chaining together builder commands.</para>
</simplesect>
The input string gets converted to a <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> automatically.</para>
<para>See <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> documentation for more details of valid input strings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="161" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a6f51117462876bda1eb743244437104a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::identity</definition>
        <argsstring>(const std::string &amp;resource)</argsstring>
        <name>identity</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>alias for setIdentity </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="166" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a82e77be3327c537b2426b571afaa5045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::addLocation</definition>
        <argsstring>(const std::string &amp;where)</argsstring>
        <name>addLocation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>add a location to the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>The resource representing a location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to this Physical entity. Allows chaining together builder commands.</para>
</simplesect>
The input string gets converted to a <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> automatically. An arbitrary number of locations are allowed. The location is added to the back of a vector containing the Resources. Left most elements of this vector represent larger physiological locations which get smaller as the index of this vector increases via use of the &quot;isPartOf&quot; predicate. For example, a cytosolic TGFb molecule in a dermal fibroblast could have a locations vector first containing a reference to skin, then dermis, then fibroblast, then cytosol. <ref refid="classThis" kindref="compound">This</ref> ends up being cytosol&lt;isPartOf&gt;fibroblast&lt;isPartOf&gt;dermis&lt;isPartOf&gt;skin.</para>
<para>See <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> documentation for more details of valid input strings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="184" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="57" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a33559c90dbe3e3be1b71898ab9a5bfa4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::PhysicalEntity::getNumLocations</definition>
        <argsstring>() const</argsstring>
        <name>getNumLocations</name>
        <briefdescription>
<para>returns the number of locations used by <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of locations in a <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="190" column="14" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a5f54e5c2df0fd5c3b9121e1426b23af6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalEntity::operator==</definition>
        <argsstring>(const PhysicalEntity &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="192" column="14" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="185" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1afee546a420f16e128ed1add9fec35b4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalEntity::operator!=</definition>
        <argsstring>(const PhysicalEntity &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="194" column="14" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1ae160c410eeffe04a1fcc9c050ddd1b42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::hasProperty</definition>
        <argsstring>(const std::string &amp;property)</argsstring>
        <name>hasProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
<para>Set the isVersionOf portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> composite annotation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>an opb term  Should be of the form OPB:OPB_12345 or OPB/OPB_12345. <ref refid="classThis" kindref="compound">This</ref> function will set the <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> isVersionOfValue property on the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> associated with this <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="202" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a6edbf68a1473211edc3dcc9c7a15d03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::about</definition>
        <argsstring>(const std::string &amp;about) override</argsstring>
        <name>about</name>
        <reimplements refid="classomexmeta_1_1PhysicalPhenomenon_1a3e180b556420ba210fb6bde06c931014">about</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>about</declname>
        </param>
        <briefdescription>
<para>Set the about portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> composite annotation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>about</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to put in rdf:about  <ref refid="classThis" kindref="compound">This</ref> function will set the <ref refid="classomexmeta_1_1Subject" kindref="compound">Subject</ref> isPropertyOfValue property on the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> associated with this <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="210" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a2498e9b0b11a00200e47332c4515b1f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::is</definition>
        <argsstring>(const std::string &amp;is)</argsstring>
        <name>is</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Set the <computeroutput>is</computeroutput> portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> composite annotation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be used for is. <ref refid="classThis" kindref="compound">This</ref> should be of the form OPB:OPB_00134  <ref refid="classThis" kindref="compound">This</ref> function calls the <computeroutput><ref refid="classomexmeta_1_1PhysicalEntity_1a4d4c3ee9572b19e44e79a44f18f1ac31" kindref="member">PhysicalEntity::setIdentity</ref></computeroutput> method and can be used as an alternative. For developers, consider which (or both? )sets of methods to keep, <computeroutput>is</computeroutput> or <computeroutput>setIdentity</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="219" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a6a68c098a063d5a8416b83ae219eddca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::isPartOf</definition>
        <argsstring>(const std::string &amp;is)</argsstring>
        <name>isPartOf</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Set the location (<computeroutput>isPartOf</computeroutput>) portion of the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> composite annotation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isPartOf</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be used for isPartOf predicate. <ref refid="classThis" kindref="compound">This</ref> should be of the form fma:FMA:12345 or fma/FMA:12345  <ref refid="classThis" kindref="compound">This</ref> function calls the <computeroutput><ref refid="classomexmeta_1_1PhysicalEntity_1a82e77be3327c537b2426b571afaa5045" kindref="member">PhysicalEntity::addLocation</ref></computeroutput> method and can be used as an alternative. For developers, consider which (or both? )sets of methods to keep, <computeroutput>addLocation</computeroutput> or <computeroutput>isPartOf</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="228" column="24" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalEntity_1a200859dbbda1b17c244ced477d21f06f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> &amp;</type>
        <definition>PhysicalEntity &amp; omexmeta::PhysicalEntity::hasPart</definition>
        <argsstring>(const std::string &amp;part)</argsstring>
        <name>hasPart</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Add item to an &quot;hasPart&quot; triple on the <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> composite annotation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be used for hasPart predicate.  used in the case of annotating complexes which have no identity but several parts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalEntity.h" line="235" column="25" bodyfile="src/omexmeta/PhysicalEntity.cpp" bodystart="65" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classomexmeta_1_1PhysicalEntity" kindref="compound">PhysicalEntity</ref> type of <ref refid="classomexmeta_1_1PhysicalPhenomenon" kindref="compound">PhysicalPhenomenon</ref> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>omexmeta::PhysicalPhenomenon</label>
        <link refid="classomexmeta_1_1PhysicalPhenomenon"/>
      </node>
      <node id="1">
        <label>omexmeta::PhysicalEntity</label>
        <link refid="classomexmeta_1_1PhysicalEntity"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>omexmeta::PhysicalProperty</label>
        <link refid="classomexmeta_1_1PhysicalProperty"/>
      </node>
      <node id="2">
        <label>omexmeta::PhysicalPhenomenon</label>
        <link refid="classomexmeta_1_1PhysicalPhenomenon"/>
        <childnode refid="3" relation="usage">
          <edgelabel>physical_property_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>omexmeta::PhysicalEntity</label>
        <link refid="classomexmeta_1_1PhysicalEntity"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/omexmeta/PhysicalEntity.h" line="29" column="5" bodyfile="src/omexmeta/PhysicalEntity.h" bodystart="29" bodyend="236"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1PhysicalEntity_1a6edbf68a1473211edc3dcc9c7a15d03c" prot="public" virt="virtual"><scope>omexmeta::PhysicalEntity</scope><name>about</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1afc8269da5c85c549c73c0431992d2658" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PhysicalPhenomenon::"><scope>omexmeta::PhysicalEntity</scope><name>about</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a82e77be3327c537b2426b571afaa5045" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>addLocation</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a2567590f9b90e21e176ce6f447854faf" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>physical_entity_property_id_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a6fd4acd7255a01322c4a53d3e84df0ba" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>free</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1afe71a5c6399b992922eb6eeda6de49bd" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>generateMetaId</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a8be912d1256d6b913c4965f96f1b730b" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getAbout</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1ae4b3374e9ebb817eb63f9105b491e958" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getIdentityResource</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a2d59ebbc920a40348d102af31ed6661a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a3e2fba07a4622db0180650d24bf263d9" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getLocationResources</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a5528b12e5dbc702c0c270328662e7031" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getModelUri</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a54d90cf6db78e98bd091f478dc5bd74a" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getNewMetaidExclusionList</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a33559c90dbe3e3be1b71898ab9a5bfa4" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getNumLocations</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1ac741cab1f6df58b0de484fc1771ef839" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aca53e0f8ce8139a919f48372b254a5d0" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getPhysicalPropertyId</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1ae99e667cbceff2da0c4c0f5c64a8ba8f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getSubjectStr</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a9676a1dcc458247a19d19cda16d640f4" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>getType</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a200859dbbda1b17c244ced477d21f06f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>hasPart</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1ae160c410eeffe04a1fcc9c050ddd1b42" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a6f51117462876bda1eb743244437104a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>identity</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1ac5f674248ef40f86df4a5160c2d193e3" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>identity_resource_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a2498e9b0b11a00200e47332c4515b1f1" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>is</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a6a68c098a063d5a8416b83ae219eddca" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>isPartOf</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a114864dfae1f79ce4e3f430b7711516c" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>local_uri_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1ac8f480836499a208e2cfbe71a1492e5b" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>location_resources_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a9de43fc3fd94d3463c7fb9b8f684e78b" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>model_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a696cbc4f6490dd55d6bd41c7711cd0ec" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>model_uri_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a710756d611350395539dfa9f7fbf764e" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>new_metaid_exclusion_list_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1afee546a420f16e128ed1add9fec35b4f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a2c726263714e31c7c19d6e73c2c593f8" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PhysicalPhenomenon::"><scope>omexmeta::PhysicalEntity</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aac3920bfe9bf16e071ebdd8ed4fabe2f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1af15355b4c2a361b4b02dca02d3877aed" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a5f54e5c2df0fd5c3b9121e1426b23af6" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a1c3322453b3c6831668ffa98d9f4b6af" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PhysicalPhenomenon::"><scope>omexmeta::PhysicalEntity</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1aa69e751efbd57e4f4e9c79dc00f7bf59" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>part_resources_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a9e17807d60d9e3f797d6c02ef85cdfc6" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>physical_property_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a9d29348a080c64f91ff6ec184fd45ece" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalEntity</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a0341918665af91cacdb4481d037c42d2" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalEntity</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a6bbbce71778e374de7d4e5e2e674fc2b" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalEntity</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a5f583e60ad44bbb3dfcd11fdc6bc72cc" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalEntity</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1af5416111e5358d3582ff598ad51d62a9" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1ad823dad75504adb78975c810e5f1ff94" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aeb95aedf1756ded154ec6753108a691e" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aa140516da97b03960175f9bc04ecf865" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a5c831ca76c36121b0fbc7b122b5539ac" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a93bf263f7fdb65bd3e8de97983a7186b" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a4d4c3ee9572b19e44e79a44f18f1ac31" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>setIdentity</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a84cae9aa96ca00df45b0f81dd8d3ffd4" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>setLocalUri</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aa1fd9929fb2e07fa20081b1a4c00c9d2" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>setModelUri</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a5d7168c527d2dbdacd612de37aa9a605" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a9bca0cb13601b6f9617df9f264968f1f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1afad41dbf096b22ab9b64441cb25e9db9" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PhysicalPhenomenon::"><scope>omexmeta::PhysicalEntity</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a4c27a0b0e430df95b3cffaf268973eec" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>setType</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1a51f5df8b2e8a1d65e5aa0d10e53b77ba" prot="public" virt="virtual"><scope>omexmeta::PhysicalEntity</scope><name>toTriples</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a74e88adb2099099e411b55cb9aa460a0" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>type_</name></member>
      <member refid="classomexmeta_1_1PhysicalEntity_1ab905eecead2704afb14285fa44899958" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>~PhysicalEntity</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a215daebc00eed1cf7d9eddeaed0d1603" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalEntity</scope><name>~PhysicalPhenomenon</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
