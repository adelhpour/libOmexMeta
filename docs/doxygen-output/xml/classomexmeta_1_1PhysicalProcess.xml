<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classomexmeta_1_1PhysicalProcess" kind="class" language="C++" prot="public">
    <compoundname>omexmeta::PhysicalProcess</compoundname>
    <basecompoundref refid="classomexmeta_1_1PhysicalPhenomenon" prot="public" virt="non-virtual">omexmeta::PhysicalPhenomenon</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProcess_1a078e2a2f6554f2144ce69d817d9b23b9" prot="private" static="no" mutable="no">
        <type>Sources</type>
        <definition>Sources omexmeta::PhysicalProcess::sources_</definition>
        <argsstring></argsstring>
        <name>sources_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="26" column="17" bodyfile="src/omexmeta/PhysicalProcess.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProcess_1a2e32cf60245f3d3d55caba72165fe3fd" prot="private" static="no" mutable="no">
        <type>Sinks</type>
        <definition>Sinks omexmeta::PhysicalProcess::sinks_</definition>
        <argsstring></argsstring>
        <name>sinks_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="27" column="15" bodyfile="src/omexmeta/PhysicalProcess.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProcess_1a127844f0eb3350b2d2335ccd26438b7d" prot="private" static="no" mutable="no">
        <type>Mediators</type>
        <definition>Mediators omexmeta::PhysicalProcess::mediators_</definition>
        <argsstring></argsstring>
        <name>mediators_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="28" column="19" bodyfile="src/omexmeta/PhysicalProcess.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProcess_1a01f2b974c79564bbb325dbe981f34ec9" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalProcess::physical_process_id_</definition>
        <argsstring></argsstring>
        <name>physical_process_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="29" column="21" bodyfile="src/omexmeta/PhysicalProcess.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classomexmeta_1_1PhysicalProcess_1a53e690a73469f891d5b6c3ab92fe31ff" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string omexmeta::PhysicalProcess::is_version_of_</definition>
        <argsstring></argsstring>
        <name>is_version_of_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="30" column="21" bodyfile="src/omexmeta/PhysicalProcess.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1acf4c42d10d6dbdd3aa4285bed7bd823b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProcess::PhysicalProcess</definition>
        <argsstring>()=delete</argsstring>
        <name>PhysicalProcess</name>
        <briefdescription>
<para>default constructor for <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>deliberately deleted. If you try using the builder interface (chaining setter methods) from a default instantiated <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> you will get an error, because there will be no model associated with <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref>. Instead, always instantiate a <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> from the <ref refid="classomexmeta_1_1Editor_1ae4a608ecbe64f05c1b64efbeeb1fdeb1" kindref="member">Editor::addPhysicalProcess()</ref> method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="41" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a20821628486c64885ca2523067a71eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProcess::~PhysicalProcess</definition>
        <argsstring>()=default</argsstring>
        <name>~PhysicalProcess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="43" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a37f99033da4635ff1af2b9f19c1b84ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProcess::PhysicalProcess</definition>
        <argsstring>(librdf_model *model, std::string model_uri, std::string local_uri, const PhysicalProperty &amp;physicalProperty, Sources sources, Sinks sinks, Mediators mediators)</argsstring>
        <name>PhysicalProcess</name>
        <param>
          <type>librdf_model *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>model_uri</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>local_uri</declname>
        </param>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> &amp;</type>
          <declname>physicalProperty</declname>
        </param>
        <param>
          <type>Sources</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>Sinks</type>
          <declname>sinks</declname>
        </param>
        <param>
          <type>Mediators</type>
          <declname>mediators</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> object. <ref refid="classSubclass" kindref="compound">Subclass</ref> of <ref refid="classomexmeta_1_1PhysicalPhenomenon" kindref="compound">PhysicalPhenomenon</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>a librdf_model pointer for current rdf graph. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>physicalProperty</parametername>
</parameternamelist>
<parameterdescription>
<para>the physical property for the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sources</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of Source objects representing the energetic sources for the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sinks</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of Sink objects representing the energetic sinks for the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mediator</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of Sink objects representing the energetic modulators for the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="55" column="9" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="9" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a8dfcffe80f264ad24e70de9d7b71c73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void omexmeta::PhysicalProcess::free</definition>
        <argsstring>()</argsstring>
        <name>free</name>
        <briefdescription>
<para>free the node resources used by <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>When the <ref refid="classomexmeta_1_1PhysicalProcess_1ab6f6af00fac2401f9a88e186fd1d897a" kindref="member">toTriples()</ref> method is used, ownership of the nodes associated with <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> are transferred to the resulting <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object, which destroys them automatically at the right time. If user does not use the toTriples method, then resources used by <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> must be freed manually with this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="67" column="14" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="95" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a2b694395a318335e81c884ed76b5f4dd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProcess::PhysicalProcess</definition>
        <argsstring>(librdf_model *model)</argsstring>
        <name>PhysicalProcess</name>
        <param>
          <type>librdf_model *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>constructor for the builder interface of <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> instantiation </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>the currently active <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="73" column="18" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a974e2717dbf4b690b95b07e9c026fd2a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>omexmeta::PhysicalProcess::PhysicalProcess</definition>
        <argsstring>(librdf_model *model, std::string model_uri, std::string local_uri)</argsstring>
        <name>PhysicalProcess</name>
        <param>
          <type>librdf_model *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>model_uri</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>local_uri</declname>
        </param>
        <briefdescription>
<para>constructor for the builder interface of <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> instantiation </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>the currently active <ref refid="classomexmeta_1_1RDF" kindref="compound">RDF</ref> model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>the local uri in current use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="80" column="18" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="18" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ab5f3100febc21173775a2090bb57a0fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Sources &amp;</type>
        <definition>const std::vector&lt; SourceParticipant &gt; &amp; omexmeta::PhysicalProcess::getSources</definition>
        <argsstring>() const</argsstring>
        <name>getSources</name>
        <briefdescription>
<para>getter for sources </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of <ref refid="classomexmeta_1_1SourceParticipant" kindref="compound">SourceParticipant</ref> objects </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="86" column="24" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="21" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a069e7caa05f346f90f413f650f081535" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Sinks &amp;</type>
        <definition>const std::vector&lt; SinkParticipant &gt; &amp; omexmeta::PhysicalProcess::getSinks</definition>
        <argsstring>() const</argsstring>
        <name>getSinks</name>
        <briefdescription>
<para>getter for sinks </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of <ref refid="classomexmeta_1_1SinkParticipant" kindref="compound">SinkParticipant</ref> objects </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="92" column="22" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a349b76ad1831d2510904510583f0d7f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Mediators &amp;</type>
        <definition>const std::vector&lt; MediatorParticipant &gt; &amp; omexmeta::PhysicalProcess::getMediators</definition>
        <argsstring>() const</argsstring>
        <name>getMediators</name>
        <briefdescription>
<para>getter for mediators </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of <ref refid="classomexmeta_1_1MediatorParticipant" kindref="compound">MediatorParticipant</ref> objects </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="98" column="26" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ab6f6af00fac2401f9a88e186fd1d897a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref></type>
        <definition>Triples omexmeta::PhysicalProcess::toTriples</definition>
        <argsstring>() override</argsstring>
        <name>toTriples</name>
        <reimplements refid="classomexmeta_1_1PhysicalPhenomenon_1a30617e685bd8b155a76d38ab5a9db273">toTriples</reimplements>
        <briefdescription>
<para>convert a <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> into a set of <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object containing the set of <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref> objects that represent this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref></para>
</simplesect>
When used, the ownership of nodes in <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> are pass to the <ref refid="classomexmeta_1_1Triples" kindref="compound">Triples</ref> object, which automatically destroys them when appropriate. Otherwise the caller is responsible for freeing resources. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="108" column="17" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="120" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ac875058d67408246aa28cf58dd77ccf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::setPhysicalProperty</definition>
        <argsstring>(std::string subject_metaid, const std::string &amp;physicalProperty)</argsstring>
        <name>setPhysicalProperty</name>
        <param>
          <type>std::string</type>
          <declname>subject_metaid</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
<para>setter for the physical property portion of the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> to enable chaining setter commands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="114" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="41" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ac49bf4a1c21c6590a9d2af7ae93e13a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::setPhysicalProperty</definition>
        <argsstring>(PhysicalProperty physicalProperty)</argsstring>
        <name>setPhysicalProperty</name>
        <param>
          <type><ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref></type>
          <declname>physicalProperty</declname>
        </param>
        <briefdescription>
<para>setter for the physical property portion of the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> to enable chaining setter commands</para>
</simplesect>
Developers. Consider removing this method in favour of the setPhysicalProperty version that only takes a string as argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="123" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ab83f58b7df77fdee131c22c71da22f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::addSource</definition>
        <argsstring>(int multiplier, std::string physical_entity_reference)</argsstring>
        <name>addSource</name>
        <param>
          <type>int</type>
          <declname>multiplier</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>physical_entity_reference</declname>
        </param>
        <briefdescription>
<para>add a source to the list of Source object associated with a <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> to enable chaining setter commands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="129" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="47" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a403ffc7d7d29702f2ff4e56084a1d714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::addSink</definition>
        <argsstring>(int multiplier, std::string physical_entity_reference)</argsstring>
        <name>addSink</name>
        <param>
          <type>int</type>
          <declname>multiplier</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>physical_entity_reference</declname>
        </param>
        <briefdescription>
<para>add a sink to the list of Source object associated with a <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> to enable chaining setter commands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="135" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="59" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a2bdf8dde5ffa6b38d5042db49fd211d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::addMediator</definition>
        <argsstring>(std::string physical_entity_reference)</argsstring>
        <name>addMediator</name>
        <param>
          <type>std::string</type>
          <declname>physical_entity_reference</declname>
        </param>
        <briefdescription>
<para>add a mediator to the list of Source object associated with a <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a reference to this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> to enable chaining setter commands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="141" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="71" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a56459d9f0087a3f92b0aca5d148b65f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::PhysicalProcess::getNumSources</definition>
        <argsstring>()</argsstring>
        <name>getNumSources</name>
        <briefdescription>
<para>returns the number of sources assocaited with the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of Source objects associated with this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="147" column="13" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ac8b79af15d4d19042ee34abca25f679f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::PhysicalProcess::getNumSinks</definition>
        <argsstring>()</argsstring>
        <name>getNumSinks</name>
        <briefdescription>
<para>returns the number of sinks assocaited with the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of Sink objects associated with this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="153" column="13" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a717a352ce3bb956201174002f904cd26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int omexmeta::PhysicalProcess::getNumMediators</definition>
        <argsstring>()</argsstring>
        <name>getNumMediators</name>
        <briefdescription>
<para>returns the number of mediators assocaited with the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of Mediator objects associated with this <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="159" column="13" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a65585bf5cd473d509f6f66c96757ff8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalProcess::operator==</definition>
        <argsstring>(const PhysicalProcess &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="161" column="14" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="107" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1af8298394b713807ec51c2b5f60afd00e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool omexmeta::PhysicalProcess::operator!=</definition>
        <argsstring>(const PhysicalProcess &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="163" column="14" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1ac09599ba82cb3cb9d58b0c171090ba44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::hasProperty</definition>
        <argsstring>(const std::string &amp;property)</argsstring>
        <name>hasProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
<para>set the hasProperty portion of the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> composite annotation </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_version_of</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be used as the <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> portion of the hasProperty <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref>. <ref refid="classThis" kindref="compound">This</ref> should be of the form OPB:OPB_12345 or OPB/OPB_12345.  <ref refid="classThis" kindref="compound">This</ref> method will set the <ref refid="classomexmeta_1_1Resource" kindref="compound">Resource</ref> resource_ attribute of the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> associated with the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="172" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a5d4e730b52c01ceea8868fb6e2372ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::about</definition>
        <argsstring>(const std::string &amp;about) override</argsstring>
        <name>about</name>
        <reimplements refid="classomexmeta_1_1PhysicalPhenomenon_1a3e180b556420ba210fb6bde06c931014">about</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>about</declname>
        </param>
        <briefdescription>
<para>set the subject (rdf:about) portion of the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> composite annotation </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>about</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to be used as the <ref refid="classomexmeta_1_1Subject" kindref="compound">Subject</ref> portion of the isVersionOf <ref refid="classomexmeta_1_1Triple" kindref="compound">Triple</ref>. <ref refid="classThis" kindref="compound">This</ref> should be an existing metaid on the model you are annotating. Will error when metaid does not exist.  <ref refid="classThis" kindref="compound">This</ref> method will set the <ref refid="classomexmeta_1_1Subject" kindref="compound">Subject</ref> subject_ attribute of the <ref refid="classomexmeta_1_1PhysicalProperty" kindref="compound">PhysicalProperty</ref> associated with the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="181" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classomexmeta_1_1PhysicalProcess_1a79d2b794d0a10a180a05d32cd04ac353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> &amp;</type>
        <definition>PhysicalProcess &amp; omexmeta::PhysicalProcess::isVersionOf</definition>
        <argsstring>(const std::string &amp;version)</argsstring>
        <name>isVersionOf</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>optionally add the isVersionOf predicate to the <ref refid="classomexmeta_1_1PhysicalProcess" kindref="compound">PhysicalProcess</ref> you are creating. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/omexmeta/PhysicalProcess.h" line="187" column="25" bodyfile="src/omexmeta/PhysicalProcess.cpp" bodystart="171" bodyend="174"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>omexmeta::PhysicalProcess</label>
        <link refid="classomexmeta_1_1PhysicalProcess"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>omexmeta::PhysicalPhenomenon</label>
        <link refid="classomexmeta_1_1PhysicalPhenomenon"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>omexmeta::PhysicalProperty</label>
        <link refid="classomexmeta_1_1PhysicalProperty"/>
      </node>
      <node id="1">
        <label>omexmeta::PhysicalProcess</label>
        <link refid="classomexmeta_1_1PhysicalProcess"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>omexmeta::PhysicalPhenomenon</label>
        <link refid="classomexmeta_1_1PhysicalPhenomenon"/>
        <childnode refid="3" relation="usage">
          <edgelabel>physical_property_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/omexmeta/PhysicalProcess.h" line="24" column="5" bodyfile="src/omexmeta/PhysicalProcess.h" bodystart="24" bodyend="189"/>
    <listofallmembers>
      <member refid="classomexmeta_1_1PhysicalProcess_1a5d4e730b52c01ceea8868fb6e2372ef5" prot="public" virt="virtual"><scope>omexmeta::PhysicalProcess</scope><name>about</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1afc8269da5c85c549c73c0431992d2658" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PhysicalPhenomenon::"><scope>omexmeta::PhysicalProcess</scope><name>about</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a2bdf8dde5ffa6b38d5042db49fd211d1" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>addMediator</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a403ffc7d7d29702f2ff4e56084a1d714" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>addSink</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ab83f58b7df77fdee131c22c71da22f39" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>addSource</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a8dfcffe80f264ad24e70de9d7b71c73b" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>free</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1afe71a5c6399b992922eb6eeda6de49bd" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>generateMetaId</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a8be912d1256d6b913c4965f96f1b730b" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getAbout</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a2d59ebbc920a40348d102af31ed6661a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getLocalUri</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a349b76ad1831d2510904510583f0d7f2" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getMediators</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a5528b12e5dbc702c0c270328662e7031" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getModelUri</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a54d90cf6db78e98bd091f478dc5bd74a" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getNewMetaidExclusionList</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a717a352ce3bb956201174002f904cd26" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getNumMediators</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ac8b79af15d4d19042ee34abca25f679f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getNumSinks</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a56459d9f0087a3f92b0aca5d148b65f5" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getNumSources</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1ac741cab1f6df58b0de484fc1771ef839" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aca53e0f8ce8139a919f48372b254a5d0" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getPhysicalPropertyId</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a069e7caa05f346f90f413f650f081535" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getSinks</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ab5f3100febc21173775a2090bb57a0fb" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getSources</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1ae99e667cbceff2da0c4c0f5c64a8ba8f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getSubjectStr</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a9676a1dcc458247a19d19cda16d640f4" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>getType</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ac09599ba82cb3cb9d58b0c171090ba44" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>hasProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a53e690a73469f891d5b6c3ab92fe31ff" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>is_version_of_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a79d2b794d0a10a180a05d32cd04ac353" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>isVersionOf</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a114864dfae1f79ce4e3f430b7711516c" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>local_uri_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a127844f0eb3350b2d2335ccd26438b7d" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>mediators_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a9de43fc3fd94d3463c7fb9b8f684e78b" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>model_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a696cbc4f6490dd55d6bd41c7711cd0ec" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>model_uri_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a710756d611350395539dfa9f7fbf764e" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>new_metaid_exclusion_list_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1af8298394b713807ec51c2b5f60afd00e" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a2c726263714e31c7c19d6e73c2c593f8" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PhysicalPhenomenon::"><scope>omexmeta::PhysicalProcess</scope><name>operator!=</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aac3920bfe9bf16e071ebdd8ed4fabe2f" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1af15355b4c2a361b4b02dca02d3877aed" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>operator=</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a65585bf5cd473d509f6f66c96757ff8d" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a1c3322453b3c6831668ffa98d9f4b6af" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PhysicalPhenomenon::"><scope>omexmeta::PhysicalProcess</scope><name>operator==</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a01f2b974c79564bbb325dbe981f34ec9" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>physical_process_id_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a9e17807d60d9e3f797d6c02ef85cdfc6" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>physical_property_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1af5416111e5358d3582ff598ad51d62a9" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1ad823dad75504adb78975c810e5f1ff94" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aeb95aedf1756ded154ec6753108a691e" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aa140516da97b03960175f9bc04ecf865" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a5c831ca76c36121b0fbc7b122b5539ac" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a93bf263f7fdb65bd3e8de97983a7186b" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1acf4c42d10d6dbdd3aa4285bed7bd823b" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalProcess</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a37f99033da4635ff1af2b9f19c1b84ce" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalProcess</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a2b694395a318335e81c884ed76b5f4dd" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalProcess</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a974e2717dbf4b690b95b07e9c026fd2a" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>PhysicalProcess</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a84cae9aa96ca00df45b0f81dd8d3ffd4" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>setLocalUri</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1aa1fd9929fb2e07fa20081b1a4c00c9d2" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>setModelUri</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ac875058d67408246aa28cf58dd77ccf6" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ac49bf4a1c21c6590a9d2af7ae93e13a7" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1afad41dbf096b22ab9b64441cb25e9db9" prot="public" virt="non-virtual" ambiguityscope="omexmeta::PhysicalPhenomenon::"><scope>omexmeta::PhysicalProcess</scope><name>setPhysicalProperty</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a4c27a0b0e430df95b3cffaf268973eec" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>setType</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a2e32cf60245f3d3d55caba72165fe3fd" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>sinks_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a078e2a2f6554f2144ce69d817d9b23b9" prot="private" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>sources_</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1ab6f6af00fac2401f9a88e186fd1d897a" prot="public" virt="virtual"><scope>omexmeta::PhysicalProcess</scope><name>toTriples</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a74e88adb2099099e411b55cb9aa460a0" prot="protected" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>type_</name></member>
      <member refid="classomexmeta_1_1PhysicalPhenomenon_1a215daebc00eed1cf7d9eddeaed0d1603" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>~PhysicalPhenomenon</name></member>
      <member refid="classomexmeta_1_1PhysicalProcess_1a20821628486c64885ca2523067a71eb8" prot="public" virt="non-virtual"><scope>omexmeta::PhysicalProcess</scope><name>~PhysicalProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
