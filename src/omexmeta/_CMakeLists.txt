
set(SEMSIM_HEADERS
        "OmexMetaUtils.h"
        "CurlGet.h"
        "RDF.h"
        "OmexMetaXmlAssistant.h"

        "Subject.h"
        "Resource.h"
        "Query.h"
        "Predicate.h"
        "Triple.h"
        "Triples.h"
        "MetaID.h"
        "PhysicalProperty.h"
        "Participant.h"

        "PhysicalPhenomenon.h"
        "PhysicalEntity.h"
        "PhysicalProcess.h"
        "PhysicalForce.h"
        "AnnotationType.h"
        "Editor.h"
        #        "TripleWriter.h"
        "SemsimCApi.h"
        #        "HERE.h"
        #        Log.h
        #        RedlandWrapper/RaptorIOStream.cpp
        #        RedlandWrapper/RaptorIOStream.h
        #        "_Reader.h"
        #        "Writer.h"
        #                "SemSim.h"
        )

set(SEMSIM_SOURCES
        "OmexMetaUtils.cpp"
        "RDF.cpp"
        "Query.cpp"
        "CurlGet.cpp"
        "OmexMetaXmlAssistant.cpp"
        "Subject.cpp"
        "Resource.cpp"
        "Predicate.cpp"
        "Triple.cpp"
        "Triples.cpp"
        "PhysicalProperty.cpp"
        "MetaID.cpp"
        "Participant.cpp"

        "PhysicalEntity.cpp"
        "PhysicalPhenomenon.cpp"
        "Editor.cpp"
        "PhysicalProcess.cpp"
        "PhysicalForce.cpp"
        "SemsimCApi.cpp"
        )


set(CMAKE_POSITION_INDEPENDENT_CODE ON)

set(SEMSIM_STATIC_LIBRARY OmexMeta-static)
set(SEMSIM_LIBRARY semsim)


# static library
add_library(OmexMeta-static STATIC ${SEMSIM_HEADERS} ${SEMSIM_SOURCES})


# add target headers so they install correctly
set_target_properties(OmexMeta-static PROPERTIES PUBLIC_HEADER "${SEMSIM_HEADERS}")

# set runtime static for windows (ignored on other systems)
set_target_properties(OmexMeta-static PROPERTIES MSVC_RUNTIME_LIBRARY "MultiThreaded")

add_dependencies(OmexMeta-static redland-combined-static)
target_include_directories(OmexMeta-static PUBLIC # make public so include dirs propagate into test binaries
        ${INCLUDE_DIRECTORIES}
        ${WRAPPER_SOURCE_DIR}
        )


target_link_libraries(OmexMeta-static PUBLIC # make public so libraries propagate into test binaries
        $<TARGET_FILE:redland-combined-static>
        ${LINK_LIBRARIES}
        )


install(TARGETS OmexMeta-static
        EXPORT OmexMeta-static
        LIBRARY
        DESTINATION lib
        PUBLIC_HEADER DESTINATION include/semsim
        )


if (${BUILD_SHARED_LIBS})

    set(CMAKE_BUILD_RPATH_USE_ORIGIN TRUE)
    set(CMAKE_INSTALL_RPATH
            "${CMAKE_INSTALL_PREFIX}/lib"   # probs not needed, but for good measure
            "${PYSEMSIM_DIR}"               # python test package
            "$ORIGIN"                       # current directory (for when in site-packages)
            )

    set(CMAKE_VERBOSE_MAKEFILE ON)

    # shared library
    add_library(OmexMeta SHARED "${SEMSIM_HEADERS}" "${SEMSIM_SOURCES}" Preproc.h)
    set_target_properties(OmexMeta PROPERTIES INSTALL_RPATH_USE_LINK_PATH TRUE)

    # set runtime shared for windows (ignored on other systems)
    if (${CMAKE_BUILD_TYPE} STREQUAL "Release")
        set_property(TARGET OmexMeta PROPERTY
                MSVC_RUNTIME_LIBRARY "MultiThreadedDLL")
    elseif (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
        set_property(TARGET OmexMeta PROPERTY
                MSVC_RUNTIME_LIBRARY "MultiThreadedDebugDLL")
    endif ()

    target_include_directories(OmexMeta PUBLIC
            ${INCLUDE_DIRECTORIES}
            )

    set(D D:/vcpkg/installed/x64-windows-static/lib)
    set(E D:/vcpkg/installed/x64-windows/lib)
    target_link_libraries(OmexMeta PUBLIC
            #            ${CMAKE_BINARY_DIR}/lib/redland-combined
            $<TARGET_FILE:redland-combined-static>
            ${D}/libcharset.lib
            ${E}/libcurl.lib
            ${D}/libiconv.lib
            ${D}/libexslt.lib
            ${D}/libxslt.lib
            ${D}/libxml2.lib
            ${D}/lzma.lib
            ${D}/zlib.lib
            ${D}/libssl.lib
            ${D}/libcrypto.lib
            ${D}/yajl_s.lib
            ws2_32 # needed for libxml2 on windows to statically link
            #            ${LINK_LIBRARIES}
            )
    add_dependencies(OmexMeta redland-combined-static)

    install(TARGETS OmexMeta
            LIBRARY
            ARCHIVE
            RUNTIME
            PUBLIC_HEADER DESTINATION include/OmexMeta
            )

    install(FILES ${LIBRARIES_DLL}
            DESTINATION bin
            )

    # for automatically installing to folder containing python api
    install(TARGETS OmexMeta
            RUNTIME DESTINATION ${PYSEMSIM_DIR}
            )
    # and remember we need the dll's in the python src dir as well
    install(FILES ${LIBRARIES_DLL}
            DESTINATION ${PYSEMSIM_DIR}
            )


    if (PLATFORM STREQUAL "linux")
        install(FILES "$<TARGET_FILE:OmexMeta>" ${LIBXML2_LIBRARY} ${LIBCURL_LIBRARY}
                DESTINATION ${PYSEMSIM_DIR})
    elseif (PLATFORM STREQUAL "windows-msvc")
    endif ()

    # An alternative command that copies on configuration, not install
    #    file(COPY ${LIBXML2_LIBRARY} DESTINATION ${PYSEMSIM_DIR})

endif ()


























